#!/bin/bash
### BEGIN INIT INFO
# Provides:          elivehealth
# Required-Start:    $local_fs $remote_fs $syslog
# Required-Stop:
# Should-Start:
# Should-Stop:
# X-Start-Before:
# X-Stop-After:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     false
# Short-Description: Configure elivehealth
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO
# Policy Info:  http://wiki.debian.org/LSBInitScripts
# also check /etc/init.d/skeleton

# Author: Thanatermesis


# Defaults
#PIDDIR=/var/run/elivehealth
#elivehealthPID=$PIDDIR/elivehealth.pid
DESC="Configure elivehealth"
SCRIPTNAME=/etc/init.d/elivehealth


# Reads config file (will override defaults above)
[ -r /etc/default/elivehealth ] && . /etc/default/elivehealth

. /lib/lsb/init-functions


do_start(){
    local _CMDLINE
    _CMDLINE="$(cat /proc/cmdline)"
    if echo "${_CMDLINE}" | grep -qsE "(boot=live)" ; then
        exit 0
    fi
    if echo "${_CMDLINE}" | grep -qs "debug" ; then
        set -x
    fi

    # check for iface network TODO: make it working back (add /etc/hosts needed file), we have a .bak copy in new versions, but specially check and create the /etc/network/interfaces file to have the loopback configuration
    if ! timeout 5 ping -c 1 localhost 1>/dev/null 2>&1 ; then
        #el_error "localhost not reachable from elivehealth daemon step"
        if ! grep -qs "auto lo" /etc/network/interfaces && ! grep -qs "iface lo inet loopback" /etc/network/interfaces ; then
            echo -e "auto lo\niface lo inet loopback" >> /etc/network/interfaces
        fi
        if ! grep -qs "^127.0.0.1.*localhost" /etc/hosts ; then
            echo -e "127.0.0.1 localhost localhost.localdomain $(hostname)" >> /etc/hosts
        fi
    fi

    # check disk usage and cleanup it if needed
    # note: this is needed to always keep the system in a bootable status
    percent_max="90"
    percent="$( LC_ALL=C df -m | awk '{if ($6 == "/") print $5}' | head -1 )"
    percent="${percent%\%}"
    if [[ -n "$percent" ]] ; then
        if [[ "${percent}" -ge "$percent_max" ]] ; then
            # logs
            #service rsyslog stop || true
            find /var/log/ -type f -iname '*'gz -delete || true
            #service rsyslog start || true

            # apt
            find "/var/lib/apt/lists" -type f -delete 1>/dev/null 2>&1 || true
            find "/var/cache/apt/archives" -type f -iname '*'deb -delete 1>/dev/null 2>&1 || true
            find "/var/cache/apt/" -type f -delete 1>/dev/null 2>&1 || true
        fi
    fi

    # oly if we are bash (not sh)
    #source /usr/lib/elive-tools/functions

    # make sure that the working console reads and outputs things correctly (otherwise tab not works on dialog's unless we do a "login" or "getty")
    #exec 0</dev/console 1>/dev/console 2>&1

    # if we had already the file is because we didn't shutdown correctly the system
    if test -e /var/tmp/elivehealth/elive-system-running ; then
        echo "yes" > /var/tmp/elivehealth/elive-system-shutdown-forced
        # let user be able to delete the file
        chmod a+rw /var/tmp/elivehealth/elive-system-shutdown-forced
    fi

    # mark that the system has booted
    mkdir -p /var/tmp/elivehealth
    chmod 1777 /var/tmp/elivehealth
    touch /var/tmp/elivehealth/elive-system-running


    #log_daemon_msg "Starting $(basename elivehealth)"

    # Make sure we have our PIDDIR, even if it's on a tmpfs
    #install -o root -g root -m 755 -d $PIDDIR

    #log_progress_msg "daemonizing"

    #if ! start-stop-daemon --start --quiet --background --make-pidfile --pidfile $elivehealthPID --oknodo --exec /usr/sbin/elivehealthd -- -D
    #then
        #log_end_msg 1
        #exit 1
    #fi

    # turn off debugging if we have finished
    if echo "${_CMDLINE}" | grep -q debug ; then
        set +x
    fi

    #log_progress_msg "step 1 completed"
    true
    log_end_msg 0
}

do_stop(){
    log_daemon_msg "Running elive-health (shutdown mode)"
    #log_progress_msg "almost"
    rm -f /var/tmp/elivehealth/elive-system-running /var/tmp/elivehealth/elive-system-shutdown-forced

    #start-stop-daemon --stop --quiet --pidfile $elivehealthPID
    # Wait a little and remove stale PID file
    #if [ -f $elivehealthPID ] && ! ps h $(cat $elivehealthPID) > /dev/null
    #then
        ## Stale PID file (elivehealth was succesfully stopped),
        ## remove it (should be removed by elivehealth itself IMHO.)
    #rm -f $elivehealthPID
    #fi


    # Hardware fixes:
    # B43 wifis
    if [[ "$( lsmod | grep -E "^b43\s+" | awk '{print $3}' | head -1 )" -gt 0 ]] ; then
        # b43: Problem with bcm43xx: there is a common problem with some cards managed with the b43 driver, it gets disconnected randomly, - source: https://wiki.archlinux.org/index.php/Talk:Broadcom_wireless
        if dmesg | grep -qs "No probe response from AP .* after .* disconnecting" ; then
            if ! grep -qs "options b43 pio=1 qos=0" "/etc/modprobe.d/b43.conf" 2>/dev/null ; then
                echo "options b43 pio=1 qos=0" >> "/etc/modprobe.d/b43.conf"
                log_progress_msg "Added a fix for your B43 wifi that fixes disconnections"
                sleep 5
            fi
        fi
    fi



    log_end_msg 0
}

case "$1" in
    "")
        echo "Error: elivehealth should be called with the 'start' argument." >&2
        ;;
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart|reload|force-reload)
        "$0" stop
        "$0" start
        ;;
    *)
        echo "Usage: elivehealth [start|stop]" >&2
        exit 3
        ;;
esac

# vim: set filetype=sh :
