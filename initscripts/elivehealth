#!/bin/bash
### BEGIN INIT INFO
# Provides:          elivehealth
# Required-Start:    $local_fs $remote_fs $syslog
# Required-Stop:
# Should-Start:
# Should-Stop:
# X-Start-Before:
# X-Stop-After:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     false
# Short-Description: Configure elivehealth
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO
# Policy Info:  http://wiki.debian.org/LSBInitScripts
# also check /etc/init.d/skeleton

# Author: Thanatermesis


# Defaults
#PIDDIR=/var/run/elivehealth
#elivehealthPID=$PIDDIR/elivehealth.pid
DESC="Configure elivehealth"
SCRIPTNAME=/etc/init.d/elivehealth


# Reads config file (will override defaults above)
[ -r /etc/default/elivehealth ] && . /etc/default/elivehealth

. /lib/lsb/init-functions


SOURCE="$0"
source /usr/lib/elive-tools/functions
source /etc/adduser.conf
REPORTS="1"
#el_make_environment
#. gettext.sh
#TEXTDOMAIN=""
#export TEXTDOMAIN

if [[ -n "$DHOME" ]] ; then
    homeusers="$DHOME"
else
    homeusers="/home"
fi


# CODEs functions get from installer: {{{
hd_uuid_decode(){
    local uuid_partition uuid_name

    uuid_name="${1#UUID=}"
    uuid_name="$( echo "$uuid_name" | sed -e 's|"||g' )"

    if [[ -z "$1" ]] || [[ "$1" = "#"* ]] ; then
        el_error "argument passed to $FUNCNAME is not valid: $1"
        return
    fi

    if echo "$uuid_name" | grep -sq "^/dev" ; then
        el_debug "UUID '$uuid_name' is already a device, no need to decode"
        echo "$uuid_name"
        return
    fi

    uuid_name="$(readlink -f "/dev/disk/by-uuid/$uuid_name" 2>/dev/null )"

    if [[ -n "$uuid_name" ]] ; then
        echo "$uuid_name"
    fi
}
get_disk_from_partition_complex(){
    # pre {{{
    local part vg_name line device pv_name

    part="$1"
    # just for fallback
    device="$1"

    # }}}
    # valid disk values
    if echo "$part" | grep -v "^/dev/mapper/" | grep -qsE "((xvd|sd|hd|vd)[a-z]|nvme[[:digit:]]+n[[:digit:]]+|mmcblk[[:digit:]]+)" ; then
        device="$( get_disk_from_partition "$part" )"

        if [[ -b "$device" ]] ; then
            echo "$device"
            return
        fi
    fi

    # lvs / cryptsetup
    if echo "$part" | grep -qs "^/dev/mapper/" ; then
        vg_name="$( LC_ALL="$EL_LC_EN" LVM_SUPRESS_FD_WARNINGS=1 lvs --noheadings --separator : -o vg_name "$part" 2>/dev/null || true )"
        if [[ -n "$vg_name" ]] ; then
            while read -ru 3 line
            do
                if [[ "$line" = "PV Name"* ]] ; then
                    pv_name="$( echo "$line" | sed -e 's|^.*/dev/|/dev/|g' )"
                fi

                if [[ "$line" = "VG Name"*${vg_name} ]] ; then
                    device="$pv_name"
                    break
                fi

            done 3<<< "$( LC_ALL="$EL_LC_EN" pvdisplay -m 2>/dev/null )"
        fi

        # decode cryptsetup info
        if [[ -n "$device" ]] ; then
            # it may be an encrypted one in any case, so lets translate it
            if LC_ALL="$EL_LC_EN" cryptsetup status "$device" 2>/dev/null | grep -qs "type:.*LUKS" ; then
                device="$( LC_ALL="$EL_LC_EN" cryptsetup status "$device" | grep "device:" | sed -e 's|^.*device:||g' )"
                # remove extra leading blank chars
                read -r device <<< "$device"
            fi
        fi
    fi
    # decode uuid
    if [[ "$device" = "UUID="* ]] ; then
        device="$( hd_uuid_decode "$device" )"
    fi

    # finally print it, if not did before
    if [[ -b "$device" ]] ; then
        device="$( get_disk_from_partition "$device" )"
        echo "$device"
    fi
}
get_disk_from_partition(){
    local disk partition is_part_found
    partition="$1"

    if ! [[ -b "$partition" ]] ; then
        return
    fi

    #get from lsblk
    while read -ru 3 line
    do
        unset is_part_found

        if echo "$line" | grep -qs "${partition##*/}" ; then
            is_part_found=1
        fi

        if ((is_part_found)) ; then
            if echo "$line" | grep -qsE "^[[:alpha:]].*disk$" ; then
                disk="$( echo "/dev/$line" | awk '{print $1}' )"

                if [[ -b "$disk" ]] ; then
                    # found!
                    echo "$disk"
                    #break
                    return
                fi
            fi
        fi
    done 3<<< "$( lsblk -rino NAME,TYPE | tac )"

    # try fast mode
    if [[ "$partition" = /dev/nvme* ]] || [[ "$partition" = /dev/mmcblk* ]] ; then
        disk="${partition%%p[0-9]*}"
    else
        disk="${partition%%[0-9]*}"
    fi


    if [[ -b "$disk" ]] ; then
        echo "$disk"
    else
        # give the default parameter given, useful for trying to get device from live cdrom
        echo "$partition"
    fi

}
############# }}}




do_start(){
    # pre {{{
    local _CMDLINE
    _CMDLINE="$(cat /proc/cmdline)"
    if echo "${_CMDLINE}" | grep -qsE "(boot=live)" ; then
        exit 0
    fi
    if echo "${_CMDLINE}" | grep -qs "debug" ; then
        set -x
    fi

    # - pre }}}
    # check for iface network TODO: make it working back (add /etc/hosts needed file), we have a .bak copy in new versions, but specially check and create the /etc/network/interfaces file to have the loopback configuration
    # loopback network {{{
    if ! timeout 5 ping -c 1 localhost 1>/dev/null 2>&1 ; then
        #el_error "localhost not reachable from elivehealth daemon step"
        if ! grep -qs "auto lo" /etc/network/interfaces && ! grep -qs "iface lo inet loopback" /etc/network/interfaces ; then
            echo -e "auto lo\niface lo inet loopback" >> /etc/network/interfaces
        fi
        if ! grep -qs "^127.0.0.1.*localhost" /etc/hosts ; then
            echo -e "127.0.0.1 localhost localhost.localdomain $(hostname)" >> /etc/hosts
        fi
    fi

    # - loopback network }}}
    # check disk usage and cleanup it if needed {{{
    # note: this is needed to always keep the system in a bootable status
    percent_max="90"
    percent="$( LC_ALL=C df -m | awk '{if ($6 == "/") print $5}' | head -1 )"
    percent="${percent%\%}"

    if [[ -n "$percent" ]] ; then
        if [[ "${percent}" -ge "$percent_max" ]] ; then
            # logs
            #service rsyslog stop || true
            find /var/log/ -type f -iname '*'gz -delete || true
            #service rsyslog start || true

            # apt
            find "/var/lib/apt/lists" -type f -delete 1>/dev/null 2>&1 || true
            find "/var/cache/apt/archives" -type f -iname '*'deb -delete 1>/dev/null 2>&1 || true
            find "/var/cache/apt/" -type f -delete 1>/dev/null 2>&1 || true

            # temporal caches by users
            rm -rf "${homeusers}/"*/.cache/mesa_shader_cache "${homeusers}/"*/.cache/chromium "${homeusers}/"*/.cache/google-chrome "${homeusers}/"*/.cache/moonchild_productions "${homeusers}/"*/.cache/thumbnails "${homeusers}/"*/.cache/mozilla "${homeusers}/"*/.cache/MuzicBrainz "${homeusers}/"*/.cache/network "${homeusers}/"*/.cache/rhythmbox "${homeusers}/"*/.cache/efreet "${homeusers}/"*/.cache/netsurf "${homeusers}/"*/.cache/el_speak "${homeusers}/"*/.cache/opera 2>/dev/null || true


        fi
    fi

    # clean temporal problematic files
    find /boot/ -iname '*'.old-dkms -delete

    # }}}

    # make sure that the working console reads and outputs things correctly (otherwise tab not works on dialog's unless we do a "login" or "getty")
    #exec 0</dev/console 1>/dev/console 2>&1

    # shutdown correct state {{{
    # if we had already the file is because we didn't shutdown correctly the system
    if test -e /var/tmp/elivehealth/elive-system-running ; then
        echo "yes" > /var/tmp/elivehealth/elive-system-shutdown-forced
        # let user be able to delete the file
        chmod a+rw /var/tmp/elivehealth/elive-system-shutdown-forced
    fi

    # mark that the system has booted
    mkdir -p /var/tmp/elivehealth
    chmod 1777 /var/tmp/elivehealth
    touch /var/tmp/elivehealth/elive-system-running


    # - shutdown correct state }}}
    # disk health data {{{
    # determine disks to scan / use
    if [[ -x "$( which smartctl )" ]] ; then
        local id disk part count_gshock count_sectors_pending count_sectors_reallocated
        count_gshock="0"
        count_sectors_reallocated="0"
        count_sectors_pending="0"

        while read -ru 3 line
        do
            #part="$( echo "$line" | awk '{if ($2 == "/" || $2 == "/home" )  print $1}' )"
            part="$( echo "$line" | awk '{if ($2 ~ "^/" )  print $1}' )"

            if [[ -n "$part" ]] ; then
                disk="$( get_disk_from_partition_complex "$part" )"

                if [[ -n "$disk" ]] ; then
                    #el_debug "adding $disk"
                    el_array_member_add "$disk" "${disks_check[@]}" ; disks_check=("${_out[@]}")
                fi
            fi
        done 3<<< "$( cat "/etc/fstab" )"

        if [[ -n "${disks_check[@]}" ]] ; then
            #el_info "${disks_check[@]}"
            for disk in "${disks_check[@]}"
            do
                while read -ru 3 line
                do
                    # shacking computer
                    if [[ "$line" = *"G-Sense_Error_Rate"* ]] ; then
                        _count_gshock="$( echo "$line" | awk '{print $10}' )"
                        if echo "$_count_gshock" | grep -qs "^[[:digit:]]\+$" ; then
                            count_gshock="$(( $count_gshock + $_count_gshock ))"
                        else
                            if echo "$_count_gshock" | grep -qs "[[:alpha:]]" ; then
                                el_warning "wrong value fetch for _count_gshock $_count_gshock"
                            fi
                        fi
                    fi
                    # badblocks: pending
                    if [[ "$line" = *"Current_Pending_Sector"* ]] ; then
                        _count_sectors_pending="$( echo "$line" | awk '{print $10}' )"
                        if echo "$_count_sectors_pending" | grep -qs "^[[:digit:]]\+$" ; then
                            count_sectors_pending="$(( $count_sectors_pending + $_count_sectors_pending ))"
                        else
                            if echo "$_count_sectors_pending" | grep -qs "[[:alpha:]]" ; then
                                el_warning "wrong value fetch for _count_sectors_pending $_count_sectors_pending"
                            fi
                        fi
                    fi
                    # badblocks: reallocated
                    if [[ "$line" = *"Reallocated_Sector_C"* ]] ; then
                        _count_sectors_reallocated="$( echo "$line" | awk '{print $10}' )"
                        if echo "$_count_sectors_reallocated" | grep -qs "^[[:digit:]]\+$" ; then
                            count_sectors_reallocated="$(( $count_sectors_reallocated + $_count_sectors_reallocated ))"
                        else
                            if echo "$_count_sectors_reallocated" | grep -qs "[[:alpha:]]" ; then
                                el_warning "wrong value fetch for _count_sectors_reallocated $_count_sectors_reallocated"
                            fi
                        fi
                    fi
                done 3<<< "$( LC_ALL="$EL_LC_EN" smartctl -s on -A "$disk" )"
            done
        fi

        # save data
        rm -f /etc/elive/disks-health
        echo -e "disks_scanned=\"${disks_check[@]}\"" >> /etc/elive/disks-health
        echo -e "count_gshock=\"${count_gshock}\"" >> /etc/elive/disks-health
        echo -e "count_sectors_reallocated=\"${count_sectors_reallocated}\"" >> /etc/elive/disks-health
        echo -e "count_sectors_pending=\"${count_sectors_pending}\"" >> /etc/elive/disks-health
    fi

    # - disk health data }}}



    #log_daemon_msg "Starting $(basename elivehealth)"

    # Make sure we have our PIDDIR, even if it's on a tmpfs
    #install -o root -g root -m 755 -d $PIDDIR

    #log_progress_msg "daemonizing"

    #if ! start-stop-daemon --start --quiet --background --make-pidfile --pidfile $elivehealthPID --oknodo --exec /usr/sbin/elivehealthd -- -D
    #then
        #log_end_msg 1
        #exit 1
    #fi

    # turn off debugging if we have finished
    if echo "${_CMDLINE}" | grep -q debug ; then
        set +x
    fi

    #log_progress_msg "step 1 completed"
    true
}

do_stop(){
    #log_daemon_msg "Running elive-health (shutdown mode)"
    #log_progress_msg "almost"
    rm -f /var/tmp/elivehealth/elive-system-running /var/tmp/elivehealth/elive-system-shutdown-forced

    #start-stop-daemon --stop --quiet --pidfile $elivehealthPID
    # Wait a little and remove stale PID file
    #if [ -f $elivehealthPID ] && ! ps h $(cat $elivehealthPID) > /dev/null
    #then
        ## Stale PID file (elivehealth was succesfully stopped),
        ## remove it (should be removed by elivehealth itself IMHO.)
    #rm -f $elivehealthPID
    #fi


    # Hardware fixes:
    # B43 wifis
    if [[ "$( lsmod | grep -E "^b43\s+" | awk '{print $3}' | head -1 )" -gt 0 ]] ; then
        # b43: Problem with bcm43xx: there is a common problem with some cards managed with the b43 driver, it gets disconnected randomly, - source: https://wiki.archlinux.org/index.php/Talk:Broadcom_wireless
        if dmesg | grep -qs "No probe response from AP .* after .* disconnecting" ; then
            if ! grep -qs "options b43 pio=1 qos=0" "/etc/modprobe.d/b43.conf" 2>/dev/null ; then
                echo "options b43 pio=1 qos=0" >> "/etc/modprobe.d/b43.conf"
                log_progress_msg "Added a fix for your B43 wifi that fixes disconnections"
                sleep 5
            fi
        fi
    fi



    #log_end_msg 0
}

case "$1" in
    "")
        echo "Error: elivehealth should be called with the 'start' argument." >&2
        ;;
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart|reload|force-reload)
        "$0" stop
        "$0" start
        ;;
    *)
        echo "Usage: elivehealth [start|stop]" >&2
        exit 3
        ;;
esac

# vim: set filetype=sh foldmethod=marker :
