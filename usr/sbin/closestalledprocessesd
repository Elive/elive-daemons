#!/bin/bash
# note: argument -D is ignored, we do the background from another side

#===  FUNCTION  ================================================================
#          NAME:  kill_processes_zombie
#   DESCRIPTION:  search and kill for zombie proceses
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
kill_processes_zombie(){
    # pre {{{
    local z_ppid z_pid z_state no_more_zombies z_ppid_comm

    no_more_zombies=0

    # }}}
    until ((no_more_zombies))
    do
	while read -ru 3 z_state z_pid z_ppid z_comm
	do
	    if [[ -z "$z_ppid" ]] || [[ -z "$z_pid" ]] ; then
		unset z_pid z_ppid
		continue
	    fi
	    # get the parents process name
	    z_ppid_comm="$(ps axo pid,comm | awk -v pid="$z_ppid" '{if($1 == pid)  { $1="" ; print $0 }}' | sed 's| $||g' )"
	    read -r z_ppid_comm <<< "$z_ppid_comm"


	    # ignore specific cases
	    # ignore unison processes:
	    if [[ "$z_comm" = "timeout "* ]] ; then
		if [[ "${z_ppid_comm}" = "unison" ]] ; then
		    continue
		fi
	    fi

	    echo "Trying to recover the zombie '$z_pid' which parent is '$z_ppid' - (${z_comm})" 1>&2
	    logger "$(basename $0) - Trying to recover the zombie '$z_pid' which parent is '$z_ppid' - (${z_comm})"
	    if kill -s SIGCHLD "$z_ppid" ; then
		logger "$(basename $0) - $z_ppid killed"
	    fi

	    sleep 3
	    if ps axo stat,pid,ppid | grep -q "^Z.*${z_pid}.*${z_ppid}" ; then
		logger "$(basename $0) - No luck, Killing parent of the zombie '$z_pid' which is '$z_ppid' - (${z_ppid_comm})" 1>&2

		if kill -9 "$z_ppid" ; then
		    logger "$(basename $0) - $z_ppid killed"
		fi
	    fi

	    unset z_pid z_ppid z_state z_comm
	done 3<<< "$( ps axo stat,pid,ppid,comm | grep "^Z" )"

	# they are all killed ? good job...
	if ! ps axo stat,pid,ppid | grep -q "^Z" ; then
	    no_more_zombies=1
	fi
    done
}
#===  FUNCTION  ================================================================
#          NAME:  kill_process
#   DESCRIPTION:  kills a process
#    PARAMETERS:  $1 = pid, $2 (opt) = state, $3 (opt) = command/name , $4 (opt) = message
#       RETURNS:  -
#===============================================================================
kill_process(){
    # pre {{{
    local pid command
    pid="$1"
    state="$2"
    command="$3"
    message="$4"

    # }}}
    if [[ -n "$pid" ]] ; then
	# zombies around, kill them
	if [[ "$state" = *Z* ]] ; then
	    kill_processes_zombie
	fi

	if [[ -n "$message" ]] ; then
	    echo -e "$message" 1>&2
	    logger "$(basename $0) - $message"
	else
	    if [[ -n "$command" ]] ; then
		echo "killing $command at ${pid}, cpu is at ${cpu_usage} since ${time_minutes} minutes" 1>&2
		logger "$(basename $0) - killing $command at ${pid}, cpu is at ${cpu_usage} since ${time_minutes} minutes"
	    fi
	fi

	if kill "$pid" 2>/dev/null 1>/dev/null ; then
	    logger "$(basename $0) - $pid killed"
	fi
	sleep 1

	if kill -9 "$pid" 2>/dev/null 1>/dev/null ; then
	    logger "$(basename $0) - $pid killed with -9"
	fi
    fi
}


main(){
    # pre {{{
    local sleeptime pid user priority nice memvrit memresident memshared status cpu_usage mem_usage time_minutes command arg

    arg="$1"

    # }}}
    # sleep times: 120 = 2 minutes, 300 = 5 minutes
    sleeptime=240

    if [[ "$arg" = "onetime" ]] ; then
	is_onetime=1
    fi
    # watch and fix
    while true
    do
	# zombies
	kill_processes_zombie
	# scan for annoying processes
	top -b -n 1 | head -n 14  | tail -n 7 | while read -r pid user priority nice memvrit memresident memshared status cpu_usage mem_usage time_minutes command
	do
	    cpu_usage="${cpu_usage%,*}"
	    time_minutes="${time_minutes%%:*}"

	    #
	    # rules
	    #

	    # gvfsd-daemon sometimes blocks sucking cpu cycles
	    if [[ "${command}" = "gvfsd-metadata" ]] && [[ "${time_minutes}" -gt 5 ]] && [[ "${cpu_usage}" -gt 70 ]] ; then
		logger "$(basename $0) - annoying process detected (${command}), minutes: ${time_minutes}, cpu usage: ${cpu_usage}, at pid: ${pid} "
		kill_process "$pid" "${status}" "$command"
	    fi

	    # tumblerd sucking around
	    if [[ "${command}" = "tumblerd" ]] && [[ "${time_minutes}" -gt 5 ]] && [[ "${cpu_usage}" -gt 70 ]] ; then
		logger "$(basename $0) - annoying process detected (${command}), minutes: ${time_minutes}, cpu usage: ${cpu_usage}, at pid: ${pid} "
		kill_process "$pid" "${status}" "$command"
	    fi

	    # zombies ? kill them with a chainsaw!
	    #if [[ "$status" = *Z* ]] && [[ "${time_minutes}" -gt 1 ]] ; then
		#kill_process "$pid" "${status}" "$command" "killing zombie process"
	    #fi

	done

	# we only want to run it one time
	if ((is_onetime)) ; then
	    exit
	fi

	# pause until the next loop
	sleep "$sleeptime"

	# clean vars
	unset pid user priority nice memvrit memresident memshared status cpu_usage mem_usage time_minutes command
    done

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

