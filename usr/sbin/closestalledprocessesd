#!/bin/bash
# note: argument -D is ignored, we do the background from another side

#===  FUNCTION  ================================================================
#          NAME:  kill_process
#   DESCRIPTION:  kills a process
#    PARAMETERS:  $1 = pid, $2 (opt) = command/name , $3 (opt) = message
#       RETURNS:  -
#===============================================================================
kill_process(){
    # pre {{{
    local pid command
    pid="$1"
    command="$2"
    message="$3"

    # }}}
    if [[ -n "$pid" ]] ; then

	if [[ -n "$message" ]] ; then
	    el_warning "$message"
	else
	    if [[ -n "$command" ]] ; then
		el_warning "closing process ${command} suspiciously blocked and wasting our resources"
		echo "killing $command at ${pid}, cpu is at ${cpu_usage} since ${time_minutes} minutes"
	    fi
	fi

	kill "$pid" 2>/dev/null 1>/dev/null
	sleep 1
	kill -9 "$pid" 2>/dev/null 1>/dev/null
    fi
}


main(){
    # pre {{{
    local sleeptime pid user priority nice memvrit memresident memshared status cpu_usage mem_usage time_minutes command


    # }}}
    # sleep times: 120 = 2 minutes, 300 = 5 minutes
    sleeptime=240

    # watch and fix
    while true
    do
	top -b -n 1 | head -n 14  | tail -n 7 | while read -r pid user priority nice memvrit memresident memshared status cpu_usage mem_usage time_minutes command
	do
	    cpu_usage="${cpu_usage%,*}"
	    time_minutes="${time_minutes%%:*}"

	    #
	    # rules
	    #

	    # gvfsd-daemon sometimes blocks sucking cpu cycles
	    if [[ "${command}" = "gvfsd-metadata" ]] && [[ "${time_minutes}" -gt 5 ]] && [[ "${cpu_usage}" -gt 70 ]] ; then
		kill_process "$pid" "$command"
	    fi

	    # tumblerd sucking around
	    if [[ "${command}" = "tumblerd" ]] && [[ "${time_minutes}" -gt 5 ]] && [[ "${cpu_usage}" -gt 70 ]] ; then
		kill_process "$pid" "$command"
	    fi

	    # zombies ? kill them with a chainsaw!
	    if [[ "$status" = *Z* ]] && [[ "${time_minutes}" -gt 20 ]] ; then
		kill_process "$pid" "$command" "killing zombie process"
	    fi

	done

	sleep "$sleeptime"

    done

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

