#!/bin/bash
# note: argument -D is ignored, we do the background from another side

export LC_NUMERIC=C

#===  FUNCTION  ================================================================
#          NAME:  kill_processes_zombie
#   DESCRIPTION:  search and kill for zombie proceses
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
kill_processes_zombie(){
    # pre {{{
    local z_ppid z_pid z_state no_more_zombies z_ppid_comm

    no_more_zombies=0

    # }}}

    # get a list of zombie candidates (and only candidates, see grep -E)
    until ((no_more_zombies))
    do
        while read -ru 3 z_state z_pid z_ppid z_comm
        do
            if [[ -z "$z_ppid" ]] || [[ -z "$z_pid" ]] ; then
                unset z_pid z_ppid
                continue
            fi
            # get the parents process name
            z_ppid_comm="$(ps axo pid,comm | awk -v pid="$z_ppid" '{if($1 == pid)  { $1="" ; print $0 }}' | sed 's| $||g' )"
            read -r z_ppid_comm <<< "$z_ppid_comm"


            # ignore specific cases
            # ignore unison processes:
            #if [[ "$z_comm" = "timeout "* ]] ; then
            #if [[ "${z_ppid_comm}" = "unison" ]] ; then
            #continue
            #fi
            #fi
            # ignore chromium processes:
            #if [[ "$z_comm" = "chromium "* ]] ; then
            #if [[ "${z_ppid_comm}" = "chromium" ]] ; then
            #continue
            #fi
            #fi

            echo "Trying to recover the zombie '$z_pid' which parent is '$z_ppid' - (${z_comm})" 1>&2
            logger "$(basename $0) - Trying to recover the zombie '$z_pid' which parent is '$z_ppid' - (${z_comm})"

            if kill -s SIGCHLD "$z_ppid" ; then
                logger "$(basename $0) - $z_ppid killed"
            fi

            sleep 3
            if ps axo stat,pid,ppid | grep -q "^Z.*${z_pid}.*${z_ppid}" ; then
                logger "$(basename $0) - No luck, Killing parent of the zombie '$z_pid' which is '$z_ppid' - (${z_ppid_comm})" 1>&2

                if kill -9 "$z_ppid" ; then
                    logger "$(basename $0) - $z_ppid killed"
                fi
            fi

            unset z_pid z_ppid z_state z_comm

            # candidates for zombies: are you a winner ?
        done 3<<< "$( ps axo stat,pid,ppid,comm | grep -E "(plugin-conta|gvfsd-metada|tumblerd|enlightenment)" | grep "^Z" )"

        # they are all killed ? good job rude boy...
        if ! ps axo stat,pid,ppid | grep -E "(plugin-conta|gvfsd-metada|tumblerd|enlightenment)" | grep -q "^Z" ; then
            no_more_zombies=1
        fi
    done
}
#===  FUNCTION  ================================================================
#          NAME:  kill_process
#   DESCRIPTION:  kills a process
#    PARAMETERS:  $1 = pid, $2 (opt) = state, $3 (opt) = command/name , $4 (opt) = message
#       RETURNS:  -
#===============================================================================
kill_process(){
    # pre {{{
    local pid cmd state message
    pid="$1"
    state="$2"
    cmd="$3"
    message="$4"

    # }}}
    if [[ -n "$pid" ]] && kill -0 "$pid" 2>/dev/null ; then
        # zombies around, kill them
        if [[ "$state" = *Z* ]] ; then
            kill_processes_zombie
        fi

        if [[ -n "$message" ]] ; then
            echo -e "$message" 1>&2
            logger "$(basename $0) - $message"
        else
            if [[ -n "$cmd" ]] ; then
                echo "killing $cmd at ${pid}, cpu is at ${cpu_usage} since ${time_minutes} minutes" 1>&2
                logger "$(basename $0) - killing $cmd at ${pid}, cpu is at ${cpu_usage} since ${time_minutes} minutes"
            fi
        fi

        if [[ "$cmd" = *enlightenment* ]] ; then
            if kill -s SIGSEGV "$pid" 2>/dev/null 1>/dev/null ; then
                logger "$(basename $0) - $pid given a segfault to recover"
            fi
            sleep 1
            # nothing more here, we don't want to kill it more than a SEGV
            return
        fi

        if kill -0 "$pid" 2>/dev/null ; then
            if kill "$pid" 2>/dev/null 1>/dev/null ; then
                logger "$(basename $0) - $pid killed"
            fi
            sleep 1
        fi

        if kill -0 "$pid" 2>/dev/null ; then
            if kill -9 "$pid" 2>/dev/null 1>/dev/null ; then
                logger "$(basename $0) - $pid killed with -9"
            fi
        fi
    fi
}


main(){
    # pre {{{
    local sleeptime pid user priority nice memvirt memresident memshared status cpu_usage mem_usage_percent time_minutes command arg

    arg="$1"

    # }}}
    # sleep times: 120 = 2 minutes, 300 = 5 minutes
    sleeptime=300

    if [[ "$arg" = "onetime" ]] ; then
        is_onetime=1
    fi
    # watch and fix
    while true
    do
        # scan for annoying processes (sorted by cpu usage)
        LC_ALL=C top -b -n 1 | head -n 200 | tail -n +8 | while read -r pid user priority nice memvirt memresident memshared status cpu_usage mem_usage_percent time_minutes command
        do
            cpu_usage="${cpu_usage%.*}"
            mem_usage_percent="${mem_usage_percent%.*}"

            memvirt="${memvirt//G/000000}"
            memvirt="${memvirt//g/000000}"
            memvirt="${memvirt//M/000}"
            memvirt="${memvirt//m/000}"

            # break the loop from here, we don't need to check more than this
            if [[ "$cpu_usage" -lt 10 ]] ; then
                break
            fi

            time_minutes="${time_minutes%.*}"
            time_minutes="$(( $(( $(( ${time_minutes%%:*} * 60 )) + ${time_minutes##*:} )) / 60 ))"

            #
            # rules
            #

            #echo -e "D: checking command: $command with minutes: $time_minutes" 1>&2

            case "$command" in
                gvfsd-metadata)
                    # gvfsd-daemon sometimes blocks sucking cpu cycles
                    if [[ "${time_minutes}" -ge 3 ]] && [[ "${cpu_usage}" -gt 60 ]] ; then
                        logger "$(basename $0) - annoying process detected (${command}), minutes: ${time_minutes}, cpu usage: ${cpu_usage}, at pid: ${pid} "
                        kill_process "$pid" "${status}" "$command"
                    fi

                    ;;
                tumblerd)
                    # tumblerd sucking around
                    if [[ "${time_minutes}" -ge 5 ]] && [[ "${cpu_usage}" -gt 60 ]] ; then
                        logger "$(basename $0) - annoying process detected (${command}), minutes: ${time_minutes}, cpu usage: ${cpu_usage}, at pid: ${pid} "
                        kill_process "$pid" "${status}" "$command"
                    fi

                    ;;
                mpg123*)
                    # mpg123 sometimes got stucked eating cpu
                    if [[ "${time_minutes}" -ge 15 ]] && [[ "${cpu_usage}" -gt 60 ]] ; then
                        logger "$(basename $0) - annoying process detected (${command}), minutes: ${time_minutes}, cpu usage: ${cpu_usage}, at pid: ${pid} "
                        kill_process "$pid" "${status}" "$command"
                    fi

                    ;;
                vlc|mplayer|gmplayer)
                    if [[ "${time_minutes}" -ge 180 ]] && [[ "${cpu_usage}" -gt 60 ]] ; then
                        # more than 3 hours with a video player consuming cpu == player stuck
                        kill_process "$pid" "${status}" "$command"
                    fi

                    ;;
                enlightenment_fm)
                    # cpu sucking
                    if [[ "${time_minutes}" -ge 20 ]] && [[ "${cpu_usage}" -gt 80 ]] ; then
                        # note: eating cpu' FM's seems like to be in the R status
                        kill_process "$pid" "${status}" "$command"
                    fi
                    # huge mem usage
                    if [[ "${time_minutes}" -ge 30 ]] && [[ "${memvirt}" -gt 700000 ]] ; then
                        kill_process "$pid" "${status}" "$command"
                    fi
                    ;;
                enlightenment)
                    # cpu sucking
                    if [[ "${time_minutes}" -ge 30 ]] && [[ "${cpu_usage}" -gt 80 ]] ; then
                        kill_process "$pid" "${status}" "$command"
                    fi
                    # huge mem usage
                    if [[ "${time_minutes}" -ge 30 ]] && [[ "${memvirt}" -gt 1200000 ]] ; then
                        kill_process "$pid" "${status}" "$command"
                    fi
                    ;;
                # blackisted ones:  yeah, we know that they sucks, and we love them on this way :/
                songbird-bin|chromium|iceweasel*|firefox*|Xorg)
                        # songbird:  its a simply greedy eater of resoureces
                        # chromium:  when we play videos cpu becomes high, and we could have it running since long time
                        # Xorg: sometimes is overloaded, its normal
                        true
                    ;;

                *)
                    if [[ "${time_minutes}" -gt 200 ]] && [[ "${cpu_usage}" -gt 60 ]] ; then
                        logger "$(basename $0) - PLEASE REPORT TO ELIVE: annoying process detected (${command}) sucking cpu for more than 3 hours at pid: ${pid}, error ? we should kill these ones too ?"
                    fi
                    ;;

            esac
        done


        # always kill long tumblerd's
        if killall --older-than 1h tumblerd 2>/dev/null ; then
            logger "$(basename $0) - stalled process detected (tumblerd), minutes: ${time_minutes}, cpu usage: (not required to know), at pid: (unknown) | from killall --older-than 1h"
        fi

        # zombies
        kill_processes_zombie


        # we only want to run it one time
        if ((is_onetime)) ; then
            exit
        fi

        # pause until the next loop
        sleep "$sleeptime"

        # clean vars
        unset pid user priority nice memvirt memresident memshared status cpu_usage mem_usage_percent time_minutes command
    done

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

