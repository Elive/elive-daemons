#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-daemons"
export TEXTDOMAIN

main(){
    # pre {{{
    local architecture return_status machine_id
    local message_ask_for_scan

    if grep -Fqs "boot=live" /proc/cmdline ; then
        is_live=1
    fi

    guitool="zenity --window-icon=/usr/share/icons/Elive/scalable/apps/logo-elive.png"

    case "$( cat /etc/debian_version )" in
        12.*|"bookworm"*)
            is_bookworm=1
            ;;
        11.*|"bullseye"*)
            is_bullseye=1
            ;;
        10.*|"buster"*)
            is_buster=1
            ;;
        7.*|"wheezy"*)
            is_wheezy=1
            ;;
    esac

    eliveversion="$( awk '$1 ~ /elive-version/ {($1="");print $0}' /etc/elive-version | sed 's/^\ //g' )"
    case "$eliveversion" in
        *.7.*)  is_alpha=1 ; ;;
        *.8.*)  is_beta=1 ; ;;
        *.9.*)  is_rc=1 ; ;;
        *.0.*)  is_stable=1 ; ;;
    esac

    RAM_TOTAL_SIZE_mb="$( el_ram_usage_show "total" )"

    for arg in "$@" ; do
        case "$arg" in
            --no-delay)
                is_nodelay=1
                ;;
            --soft)
                is_soft=1
                ;;
        esac
    done

    if ((is_interactive)) ; then
        is_nodelay=1
    fi


    # }}}
    # dump the dbus address to use in other places if we need to
    if [[ -n "$DBUS_SESSION_BUS_ADDRESS" ]] ; then
        echo "$DBUS_SESSION_BUS_ADDRESS" > "$HOME/.cache/dbus-session-address-last.txt"
    fi

    source /etc/elive/machine-profile 2>/dev/null || true
    source /etc/elive/settings 2>/dev/null || true


    # wait desktop ready
    if ! ((is_nodelay)) ; then
        sleep 12
    fi

    # get configurations
    el_config_get

    # TODO: systemctl verification not fully working yet, more tests required
    # check systemctl connection {{{
    # if ! systemctl --user list-dependencies 1>/dev/null 2>&1 ; then
    #     $guitool --error --text="$( eval_gettext "Failed to connect to your Systemctl user session. Please log back into your desktop or restart the computer." )"
    #     exit
    # fi
    # - check systemctl connection }}}
    #
    # start things {{{
    # always reload crontab if we have it
    if [[ -s "$HOME/.crontab" ]] ; then
        crontab "$HOME/.crontab"
    fi
    # - start things }}}
    # was the shutdown forced? {{{
    #
    if ! ((is_soft)) ; then
        if [[ -e "/var/tmp/elivehealth/elive-system-shutdown-forced" ]] && grep -qsE "^(yes|user notified pre)$" "/var/tmp/elivehealth/elive-system-shutdown-forced" ; then
            local message_shutdown_warn
            message_shutdown_warn="$( printf "$( eval_gettext "You previously turned off the computer incorrectly. A forced shutdown can be very damaging to your data. You should shut down the computer properly by clicking on your desktop to bring up the menu and selecting the shutdown option. If your computer freezes unexpectedly, consider trying a different kernel version or graphics drivers." )" "" )"
            # warn the user
            el_notify "important" "utilities-system-monitor" "$( eval_gettext "Forced shutdown detected" )" "$message_shutdown_warn"

                # remove the verification file
                echo "user notified post" > "/var/tmp/elivehealth/elive-system-shutdown-forced"
        fi
    fi

    # }}}
    # max temperature reached? {{{
    #
    if ! ((is_soft)) ; then
        _notification_max_temperature_reached="$( cat /var/log/syslog /var/log/kern.log /var/log/syslog.1 /var/log/kern.log.1 2>/dev/null | grep "critical temperature reached.*shutting down" | sort -u | tr '\n' ' ' )"

        if [[ -n "$_notification_max_temperature_reached" ]] && [[ "$_notification_max_temperature_reached" != "$conf_notification_max_temperature_reached" ]] ; then
            $guitool --warning --text="$( eval_gettext "Elive detected that your computer reached a critical temperature and forced a shutdown for its safety. This is common on old computers where dust has accumulated in the fans. To solve the issue you should remove the dust from your computer by opening it or blowing with caution while running. Optionally you can set your CPU speed to run a little slower. This could make your computer more reliable, albeit slower." )"

                # make sure to not show again the message if we already did it
                conf_notification_max_temperature_reached="$_notification_max_temperature_reached"
                el_config_save "conf_notification_max_temperature_reached"
        fi
    fi

    # }}}
    # filesystem almost full {{{
    #
    # default values to check
    percent_max="88"
    percent_max_crit="94"

    if ! el_flag check "disk-full-notified" ; then
        percent="$( LC_ALL=C df -m | awk '{if ($6 == "/home") print $5}' | head -1 )"
        percent="${percent%\%}"
        # no extra /home? use /
        if [[ -z "$percent" ]] ; then
            percent="$( LC_ALL=C df -m | awk '{if ($6 == "/") print $5}' | head -1 )"
            percent="${percent%\%}"
        fi

        # root almost full, always warning
        if [[ "${percent}" -ge "$percent_max_crit" ]] ; then
            el_notify "crit" "gparted" "$( eval_gettext "Hard disk is full" )" "$( eval_gettext "Your root partition is full. We recommend removing unneeded software, enlarging your partition, or reinstalling Elive using compressed BTRFS. A full disk may prevent your system from booting." )"
            is_disk_full=1
            # do NOT mark that the user is already notified, because we are in critical mode
            # el_flag add "disk-full-notified"
        fi

        if [[ "${percent}" -ge "$percent_max" ]] && ! el_flag check "disk-full-warn" ; then
            # TODO: <AlsoTheTechRobo> Also, I'd condense the popups. "Your disk is almost full, your partition could brick" can be merged with "Do you want Elive to remove temporary files?"
            $guitool --warning --text="$( eval_gettext "Your partition is nearly full. We recommend deleting old files to free up space; otherwise, your installation could become unusable if it runs out of space." )"
            is_disk_full=1
            # mark that the user is already notified
            el_flag add "disk-full-notified"
        fi

        if ((is_disk_full)) ; then
            if $guitool --question --text="$( eval_gettext "Do you want Elive to automatically clean some unneeded and temporary files now?" )" ; then
                # delete flags if users frees space, in order to show again the message if the user don't reboot the machine
                el_flag del "disk-full-notified"

                # delete unneeded things now
                find "$HOME/.cache" -not -path "*/.cache/zsh/*" -not -path "*/.cache/elive*" -type f -delete
                find "$HOME/.thumbnails" -type f -delete

                killall rhythmbox
                killall chromium
                killall google-chrome
                killall opera
                killall palemoon
                killall efreetd
                killall firefox-esr
                killall picard
                killall netsurf
                killall opera
                sync
                rm -rf "${HOME}/.cache/mesa_shader_cache" "${HOME}/.cache/chromium" "${HOME}/.cache/google-chrome" "${HOME}/.cache/moonchild_productions" "${HOME}/.cache/thumbnails" "${HOME}/.cache/mozilla" "${HOME}/.cache/MuzicBrainz" "${HOME}/.cache/network" "${HOME}/.cache/rhythmbox" "${HOME}/.cache/efreet" "${HOME}/.cache/netsurf" "${HOME}/.cache/el_speak" "${HOME}/.cache/opera"

                killall -9 efreetd

                # clean compiling caches
                ccache -c -C 2>/dev/null || true

                # free the trash
                find "$HOME/.local/share/Trash" -type f -delete

                # free amule incoming
                find "$HOME/.aMule/Temp" -type f -delete

                # free psd profiles
                if which psd 1>/dev/null && LC_ALL=C systemctl --user status psd 2>/dev/null | colors-remove | grep -F "Active: active" ; then
                    psd c
                else
                    rm -rf "$HOME/.config/"*-crashrecovery-*
                fi

                echo > "$HOME/.xsession-errors"

                # wine apps
                #rm -rf ${DHOME}/${result}/.local/share/applications/wine
                #rm -rf ${DHOME}/${result}/.local/share/desktop-directories/wine* 2>/dev/null
                #rm -rf ${DHOME}/${result}/.wine 2>/dev/null
                sync

                percent_new="$( LC_ALL=C df -m | awk '{if ($6 == "/home") print $5}' | head -1 )"
                percent_new="${percent_new%\%}"
                if [[ -z "$percent_new" ]] ; then
                    percent_new="$( LC_ALL=C df -m | awk '{if ($6 == "/") print $5}' | head -1 )"
                    percent_new="${percent_new%\%}"
                fi

                message_ask_for_scan="$( printf "$( eval_gettext "Your hard disk used space has changed from %s to %s. Would you like to scan your files to identify where the increased usage is occurring?" )" "${percent}%" "${percent_new}%" )"
            else
                message_ask_for_scan="$( printf "$( eval_gettext "Do you want to scan your files to find out where the bigger waste of space can be found?" )" ) - ${percent}% used."

                # delete flags if users says "no" in order to show again the message if the user don't reboot the machine
                # el_flag del "disk-full-notified"
            fi


            if $guitool --question --text="$message_ask_for_scan" ; then
                if ! el_dependencies_check "baobab" ; then
                    el_dependencies_install "baobab"
                fi
                baobab "$HOME" &

                sleep 3
                $guitool --info --text="$( eval_gettext "Please wait for the scan to complete to view the results. Meanwhile, consider removing unnecessary files from your Downloads folder, where most of the unused space is likely located." )"
            fi
        fi
    fi


    # }}}
    # Disk health {{{
    #

    if [[ -s "/etc/elive/disks-health" ]] ; then
        source "/etc/elive/disks-health"

        # gshock reports
        if [[ "$count_gshock" -gt 0 ]] ; then
            if [[ "$count_gshock" != "$conf_count_gshock" ]] ; then
                el_notify "normal" "utilities-system-monitor" "Elive $( eval_gettext "Alert of strong movement" )" "$( eval_gettext "Do not shake the computer while it's on; it could damage your hard disk. Shocks received so far:" ) $count_gshock"

                # save to not repeat
                conf_count_gshock="$count_gshock"
                el_config_save "conf_count_gshock"
            fi
        fi

        # bad blocks reports
        if [[ "$count_sectors_reallocated" -gt 0 ]] ; then
            if [[ "$count_sectors_reallocated" != "$conf_count_sectors_reallocated" ]] ; then
                if [[ -z "$conf_count_sectors_reallocated" ]] ; then
                    conf_count_sectors_reallocated="0"
                fi

                local message_badblocks
                message_badblocks="$( printf "$( eval_gettext "One of your hard disks has bad blocks, indicating degradation. Data may be lost if saved to undetected bad blocks. Backup important information, and consider replacing the hard drive if this message appears frequently." )" "" )"
                local message_badblocks_counted
                message_badblocks_counted="$( printf "$( eval_gettext "Bad blocks registered:" )" "" )"
                local message_badblocks_counted_before
                message_badblocks_counted_before="$( printf "$( eval_gettext "Previously registered:" )" "" )"

                $guitool --warning --text="$message_badblocks $message_badblocks_counted $count_sectors_reallocated $message_badblocks_counted_before $conf_count_sectors_reallocated"

                # save to not repeat
                conf_count_sectors_reallocated="$count_sectors_reallocated"
                el_config_save "conf_count_sectors_reallocated"
            fi
        fi

        # bad blocks reports
        if [[ "$count_sectors_pending" -gt 0 ]] ; then
            if [[ "$count_sectors_pending" != "$conf_count_sectors_pending" ]] ; then
                if [[ -z "$conf_count_sectors_pending" ]] ; then
                    conf_count_sectors_pending="0"
                fi

                local message_badblocks_pending
                message_badblocks_pending="$( printf "$( eval_gettext "One or more bad blocks found on your system. While the system can manage them, more could cause crashes or data loss. Replace the hard drive, preferably with an SSD for speed and reliability, if this message frequently appears." )" "" )"
                local message_badblocks_pending_counted
                message_badblocks_pending_counted="$( printf "$( eval_gettext "Pending sectors for reallocation:" )" "" )"

                $guitool --warning --text="$message_badblocks_pending $message_badblocks_pending_counted $count_sectors_pending"

                # save to not repeat
                conf_count_sectors_pending="$count_sectors_pending"
                el_config_save "conf_count_sectors_pending"
            fi
        fi

        # BTRFS reports
        #
        # examples:
        # /var/log/{syslog,kernel.log}:
        # Jul 16 21:30:51 Spaceship kernel: [29930.222471] BTRFS error (device dm-0): fixed up error at logical 2869947400192 on dev /dev/mapper/luks-d8ce1556-4f5d-45ba-8ed7-d01eb76b7378 physical 2843112243200
        # Jul 16 15:28:14 Spaceship kernel: [ 8173.312591] BTRFS error (device dm-0): unable to fixup (regular) error at logical 342490873856 on dev /dev/mapper/luks-d8ce1556-4f5d-45ba-8ed7-d01eb76b7378 physical 345720487936
        # Jul 16 15:27:10 Spaceship kernel: [ 8108.636278] BTRFS error (device dm-0): unable to fixup (regular) error at logical 335801679872 on dev /dev/mapper/luks-d8ce1556-4f5d-45ba-8ed7-d01eb76b7378 physical 339031293952
        # dmesg:
        # [ 5379.898700] BTRFS error (device dm-0): fixed up error at logical 342490742784 on dev /dev/mapper/luks-d8ce1556-4f5d-45ba-8ed7-d01eb76b7378 physical 345720356864
        # [ 5381.221865] BTRFS error (device dm-0): unable to fixup (regular) error at logical 342490873856 on dev /dev/mapper/luks-d8ce1556-4f5d-45ba-8ed7-d01eb76b7378 physical 345720487936
        # [ 5381.242322] BTRFS warning (device dm-0): i/o error at logical 342490873856 on dev /dev/mapper/luks-d8ce1556-4f5d-45ba-8ed7-d01eb76b7378, physical 345720487936, root 5, inode 3342010, offset 393216, length 4096, links 1 (path: DataExtra/debootstraps/mkdeb-chroots/debootstrap_bookworm_trixiesources_amd64/usr/share/locale/zh_TW/LC_MESSAGES/git.mo)

        if dmesg | LC_ALL=C grep -qsiE "BTRFS (error|warning).*(fixed up error at logical|unable to fixup|checksum verify failed on|: i/o error at logical)" ; then
            btrfs_dmesg_errors="$( dmesg | LC_ALL=C grep -iE "BTRFS error.*(fixed up error at logical|unable to fixup|checksum verify failed on)" | sed -e 's|^.*] BTRFS |BTRFS |Ig' | sort -u )"
            if [[ "$btrfs_dmesg_errors" != "$conf_btrfs_dmesg_errors" ]] ; then

                # save to not repeat
                conf_btrfs_dmesg_errors="$btrfs_dmesg_errors"
                el_config_save "conf_btrfs_dmesg_errors"

                local message_btrfs_title message_btrfs_1 message_btrfs_2 message_btrfs_knowmore message_btrfs_repair message_btrfs_affected_files message_btrfs_4 message_btrfs_filename message_btrfs_3
                message_btrfs_title="$( printf "$( eval_gettext "Data integrity failures" )" "" )"
                message_btrfs_knowmore="$( printf "$( eval_gettext "Know more" )" "" )"
                message_btrfs_1="$( eval_gettext "Your filesystem has detected errors in files that was unable to fix. Use manually the BTRFS maintenance tools to know more of them." )"
                message_btrfs_2="$( eval_gettext "BTRFS detected errors in your files. Elive is doing a self-healing, but it is recommended to back up your data and run a filesystem check to prevent data loss." )"
                message_btrfs_repair="$( eval_gettext "Run a full check?" )"
                message_btrfs_affected_files="$( eval_gettext "These are the damaged files, try to recover them from a backup copy if you have any. Make sure to delete the damaged files after that to free up the problematic location:" )"
                message_btrfs_filename="$( eval_gettext "Damaged files in your hard disk" )"
                message_btrfs_3="$( eval_gettext "A file has been created in your user directory with the details of the affected files and inodes so you can verify them better." )"
                message_btrfs_4="$( eval_gettext "Error messages found:" )"

                if dmesg | grep -qs "BTRFS error.* unable to fixup" ; then
                    btrfs_damaged_files="$( dmesg | grep "BTRFS.*inode.*path:" | sed -e 's|^.*path: ||g' -e 's|)$||g' )"
                    # show the unrecoverable errors
                    if [[ -n "$btrfs_damaged_files" ]] ; then
                        # save results to a file in the home of the user
                        echo -e "${message_btrfs_1}\n\n${message_btrfs_affected_files}\n\n${btrfs_damaged_files}\n\n${message_btrfs_4}\n\n${btrfs_dmesg_errors}" >> "$HOME/${message_btrfs_filename} - $( date +%F ).txt"
                    else
                        # save results to a file in the home of the user
                        echo -e "${message_btrfs_1}\n\n${message_btrfs_4}\n\n${btrfs_dmesg_errors}" >> "$HOME/${message_btrfs_filename} - $( date +%F ).txt"
                    fi

                    # show popup
                    result="$( el_notify wait bomb "$message_btrfs_title" "${message_btrfs_1}\n\n${message_btrfs_3}" --action=open="$message_btrfs_knowmore" )"


                    if [[ "$result" == "open" ]] ; then
                        is_know_more=1
                    fi

                else
                    if ! $guitool --question --title="$message_btrfs_title" --cancel-label="$message_btrfs_knowmore" --text="${message_btrfs_2}\n\n$btrfs_dmesg_errors" ; then
                        is_know_more=1
                    fi
                fi

                if ((is_know_more)) ; then
                    gksu -- urxvt -e bash -c '
                        source /usr/lib/elive-tools/functions
                        while read -ru 3 line
                        do
                            mountpoint="$(echo "$line" | awk '"'"'{if ($3 == "btrfs") print $2}'"'"')"
                            if [[ -e "$mountpoint" ]]; then
                                if ! btrfs scrub status "$mountpoint" | grep -qs "no errors found" ; then
                                    echo "Status for ${mountpoint}:"
                                    btrfs scrub status "$mountpoint" | tail -n 3
                                    echo ""
                                    if el_confirm "'"$message_btrfs_repair"'" ; then
                                        btrfs check "$mountpoint"
                                    fi
                                    echo
                                    is_shown=1
                                fi
                            fi
                        done 3<<< "$(cat "/proc/mounts")"
                        echo -e "Press Enter to continue..."
                        ((is_shown)) && read nothing
                        '

                fi

            fi
        fi
    fi


    # }}}
    # stability status {{{
    if ! ((is_soft)) ; then
        if ((is_buster)) && ((is_alpha)) ; then
            if [[ -n "$E_START" ]] && [[ -f "/usr/share/doc/e17-stable/versions.history.Elive.gz" ]] ; then
                el_notify important bomb "$( eval_gettext "Remember" )" "$( eval_gettext "The E17 desktop is not functioning properly on newer versions. It is slow, CPU-intensive, lacks a system tray, special effects, menus, and has disappearing windows. We suggest switching to E16, which is better integrated currently, or install the latest Enlightenment version by executing \"apui enlightenment\" in the terminal." )"
            fi
        fi
    fi

    # - stability status }}}
    # repo issues {{{
    repos="$( grep -H "^deb " /etc/apt/sources.list /etc/apt/sources.list.d/* )"
    if ((is_bookworm)) ; then
        if echo "$repos" | grep -Fv "dropbox.com" | grep -qsE "(\Wwheezy|\Wbuster|\Wbullseye|\Wtesting|\Wsid|ubuntu|ppa.launchpad|\Wrestricted)" ; then
            echo "$repos" | grep -Fv "dropbox.com" | grep -E "(\Wwheezy|\Wbuster|\Wbullseye|\Wtesting|\Wsid|ubuntu|ppa.launchpad|\Wrestricted)"
            el_notify normal computer-fail "$( eval_gettext "Wrong repositories" )" "$( eval_gettext "You have mixed repositories configured in your system. This is strongly discouraged and can cause your system to malfunction if you don't know what you're doing. If you encounter issues with your system, we advise you to reinstall Elive without modifying the default provided repositories. Note that PPAs, commonly used with Ubuntu, are often misconfigured for Debian (on which Elive is based)." )"
        fi
    fi
    if ((is_bullseye)) ; then
        if echo "$repos" | grep -Fv "dropbox.com" | grep -qsE "(\Wwheezy|\Wbuster|\Wbookworm|\Wtesting|\Wsid|ubuntu|ppa.launchpad|\Wrestricted)" ; then
            echo "$repos" | grep -Fv "dropbox.com" | grep -E "(\Wwheezy|\Wbuster|\Wbookworm|\Wtesting|\Wsid|ubuntu|ppa.launchpad|\Wrestricted)"
            el_notify normal computer-fail "$( eval_gettext "Wrong repositories" )" "$( eval_gettext "You have mixed repositories configured in your system. This is strongly discouraged and can cause your system to malfunction if you don't know what you're doing. If you encounter issues with your system, we advise you to reinstall Elive without modifying the default provided repositories. Note that PPAs, commonly used with Ubuntu, are often misconfigured for Debian (on which Elive is based)." )"
        fi
    fi
    if ((is_buster)) ; then
        if echo "$repos" | grep -Fv "dropbox.com" | grep -qsE "(\Wwheezy|\Wbullseye|\Wtesting|\Wsid|ubuntu|ppa.launchpad|\Wrestricted)" ; then
            echo "$repos" | grep -Fv "dropbox.com" | grep -E "(\Wwheezy|\Wbullseye|\Wtesting|\Wsid|ubuntu|ppa.launchpad|\Wrestricted)"
            el_notify normal computer-fail "$( eval_gettext "Wrong repositories" )" "$( eval_gettext "You have mixed repositories configured in your system. This is strongly discouraged and can cause your system to malfunction if you don't know what you're doing. If you encounter issues with your system, we advise you to reinstall Elive without modifying the default provided repositories. Note that PPAs, commonly used with Ubuntu, are often misconfigured for Debian (on which Elive is based)." )"
        fi
    fi
    # - repo issues }}}
    # tell about squashfs errors in live mode {{{
    if ! ((is_soft)) ; then
        if grep -Fqs "boot=live" /proc/cmdline ; then
            if [[ -x "$(which live-mode-errors-report )" ]] ; then
                if pidof live-mode-errors-report 1>/dev/null 2>&1 ; then
                    killall live-mode-errors-report
                    sleep 2
                fi
                ( live-mode-errors-report & )
            fi
        fi
    fi

    #}}}
    # browsers on tmpfs {{{
    # only if it was never set / configured yet (if is configured, is set to 0 which is defined):
    if ! ((is_soft)) && [[ -x "$(which systemctl)" ]] && [[ -z "$MACHINE_VIRTUAL" ]] ; then

        # always reconfigure it on persistence
        if ((is_live)) && grep -Fqs "persistence" /proc/cmdline ; then
            if [[ "$RAM_TOTAL_SIZE_mb" -lt 5000 ]] ; then
                elive-browsers-on-ram --quiet "disable"
            fi
        fi

        if [[ -z "$conf_browsers_on_ram" ]] || [[ ! -L "$HOME/.config/systemd/user/default.target.wants/psd.service" ]] ; then
            # default
            _browsers_on_ram=0

            # Note: live mode doesn't needs it since its already on Live mode, so disable it entirely to ask since this point, unless we are in persistence mode which is needed
            if ((is_live)) ; then
                if grep -Fqs "persistence" /proc/cmdline ; then
                    if [[ "$RAM_TOTAL_SIZE_mb" -ge 5000 ]] ; then
                        # persistence mode: always need psd
                        _browsers_on_ram=1
                    fi
                fi
            else
                # ssd on home or root: always, if at least 3,2 gb of ram
                if grep -qs "^ssd_on_home: yes" /etc/elive-version ; then
                    #if [[ "$RAM_TOTAL_SIZE_mb" -gt 2700 ]] ; then
                        _browsers_on_ram=1
                    #fi
                else
                    if ! grep -qs "^ssd_on_home: " /etc/elive-version ; then
                        if grep -qs "^ssd_on_root: yes" /etc/elive-version ; then
                            #if [[ "$RAM_TOTAL_SIZE_mb" -gt 2700 ]] ; then
                                _browsers_on_ram=1
                            #fi
                        else
                            # this means we have not any "^ssd_on" setting, so we don't know
                            if ! grep -qs "^ssd_on_root: " /etc/elive-version ; then
                                #if [[ "$RAM_TOTAL_SIZE_mb" -gt 2700 ]] ; then
                                    _browsers_on_ram_ask=1
                                #fi
                            fi
                        fi
                    fi
                fi
                # if more than X of ram: always, speeds up
                if [[ "$RAM_TOTAL_SIZE_mb" -gt 5000 ]] ; then
                    _browsers_on_ram=1
                else
                    # if enough ram, ask
                    #if [[ "$RAM_TOTAL_SIZE_mb" -gt 2700 ]] ; then
                        _browsers_on_ram_ask=1
                    #fi
                fi
            fi


            # ask
            if ! ((_browsers_on_ram)) && [[ -z "$conf_browsers_on_ram" ]] && ((_browsers_on_ram_ask)) ; then
                if $guitool --question --text="$( eval_gettext "Do you want to run your browsers over RAM? This will use an extra half gigabyte of memory but will make your browser faster and also improve the health of your hard disk. Select this option especially if you have an SSD disk." )" ; then
                    _browsers_on_ram=1
                else
                    _browsers_on_ram=0
                fi

                # save
                conf_browsers_on_ram="$_browsers_on_ram"
                el_config_save "conf_browsers_on_ram"
            fi

        fi

        # enable it
        if ((conf_browsers_on_ram)) ; then
            # first disable any possible daemon if not working
            if [[ ! -L "$HOME/.config/systemd/user/default.target.wants/psd.service" ]] ; then
                elive-browsers-on-ram --quiet "disable"
            fi
            # enable daemon
            if ! LC_ALL=C systemctl --user status psd.service | colors-remove | grep -Fqs "Active: active" && ! LC_ALL=C systemctl --user status psd.service 2>&1 | colors-remove | grep -Fqs "Connection refused" ; then
                if ! elive-browsers-on-ram --quiet "configure" ; then
                    # disable it for the next times:
                    conf_browsers_on_ram="0"
                    el_config_save "conf_browsers_on_ram"
                fi
            fi
        fi
    fi

    # - browsers on tmpfs }}}

    #
    # delayed actions
    #
    if ! ((is_interactive)) && ! ((is_nodelay)) ; then
        sleep 20
    fi
    #

    # scanners support {{{
    if ! ((is_wheezy)) ; then

        # INFO: search for new package drivers on https://support.brother.com/g/b/productseries.aspx?c=eu_ot&lang=en&pcatid=4 , search models like listed here
        # INFO: get the list of supported scanners from the inside's brscan* packages:
        #  $  find . -type f -iname '*ini' -exec cat "{}" \; | grep "0x0.*,.*,.*,\".*\"" | sed -e 's|^.*,"||g' -e 's|".*$||g' | sort -u | tr '\n' '|' | sed -e 's|\|$||g' ; echo
        # INFO: also, --hack the package and add the Section: graphics, Priority: optional, also chown -R root:root

        if lsusb | grep -Fqs "Brother Industries" || grep -Fqs "Brother Industries" /tmp/.hwinfo.txt 2>/dev/null ; then
            if dpkg -l | grep -qsE "^ii\s+" && ! dpkg -l | grep -qsE "^ii\s+brscan" ; then
                # get models
                brother_scanner="$( cat /tmp/.hwinfo 2>/dev/null | grep -F "Brother Industries" ; lsusb | grep -F "Brother Industries" )"

                local message_brother_scanner
                message_brother_scanner="$( printf "$( eval_gettext "Woohoo! Elive can make your Brother Scanner work directly! Proceed with our magic?" )" "" )"

                # brscan  0.2.4
                if echo "$brother_scanner" | grep -qsE "(DCP-1000|DCP-1000J|DCP-1400|DCP-3020C|DCP-4020C|DCP-8020|DCP-8025D|DCP-8025J|DCP-8040|DCP-8045D|FAX-4100|FAX-4750e|FAX-5750e|MFC-100|MFC-150CL|MFC-3100C|MFC-3200C|MFC-3220C|MFC-3320CN|MFC-3420C|MFC-3420J|MFC-3820CN|MFC-3820JN|MFC-4420C|MFC-4800|MFC-4800J|MFC-4820C|MFC-5100C|MFC-5100J|MFC-5200C|MFC-5200J|MFC-580|MFC-590|MFC-6800|MFC-6800J|MFC-8210|MFC-8220|MFC-8420|MFC-8440|MFC-8500|MFC-8500J|MFC-8820D|MFC-8820J|MFC-8840D|MFC-890|MFC-9030|MFC-9070|MFC-9160|MFC-9180|MFC-9660|MFC-9700|MFC-9760|MFC-9800|MFC-9800J|MFC-9860|MFC-9880)" ; then
                    # brscan driver needed
                    if $guitool --question --text="$message_brother_scanner" ; then
                        el_dependencies_install "brscan"
                    fi
                else
                    # brscan 2  0.2.5
                    if echo "$brother_scanner" | grep -qsE "(DCP-110C|DCP-115C|DCP-116C|DCP-117C|DCP-118C|DCP-120C|DCP-130C|DCP-135C|DCP-150C|DCP-153C|DCP-155C|DCP-157C|DCP-310CN|DCP-315CN|DCP-330C|DCP-340CW|DCP-350C|DCP-353C|DCP-357C|DCP-540CN|DCP-560CN|DCP-7010|DCP-7020|DCP-7025|DCP-750CN|DCP-750CW|DCP-770CN|DCP-770CW|DCP-9040CN|DCP-9042CDN|DCP-9045CDN|MFC-210C|MFC-215C|MFC-230C|MFC-235C|MFC-240C|MFC-260C|MFC-265C|MFC-3240C|MFC-3340CN|MFC-3360C|MFC-410CN|MFC-420CN|MFC-425CN|MFC-440CN|MFC-460CN|MFC-465CN|MFC-480CN|MFC-5440CN|MFC-5460CN|MFC-5840CN|MFC-5860CN|MFC-610CLN|MFC-615CL|MFC-620CLN|MFC-620CN|MFC-630CD|MFC-640CW|MFC-650CD|MFC-660CN|MFC-665CW|MFC-680CN|MFC-685CW|MFC-7220|MFC-7225N|MFC-7420|MFC-7820N|MFC-820CN|MFC-820CW|MFC-830CLN|MFC-840CLN|MFC-845CW|MFC-850CDN|MFC-860CDN|MFC-870CDN|MFC-880CDN|MFC-885CW|MFC-9420CN|MFC-9440CN|MFC-9450CDN|MFC-9640CW|MFC-9840CDW)" ; then
                        # brscan driver needed
                        if $guitool --question --text="$message_brother_scanner" ; then
                            el_dependencies_install "brscan2"
                        fi
                    else
                        # brscan 3  0.2.13
                        if echo "$brother_scanner" | grep -qsE "(DCP-145C|DCP-163C|DCP-165C|DCP-167C|DCP-185C|DCP-195C|DCP-365CN|DCP-375CW|DCP-383C|DCP-385C|DCP-387C|DCP-390CN|DCP-395CN|DCP-535CN|DCP-585CW|DCP-595CN|DCP-6690CW|DCP-7030|DCP-7040|DCP-7045N|DCP-8070D|DCP-8080DN|DCP-8085DN|DCP-9010CN|DCP-9040CN|DCP-9042CDN|DCP-9045CDN|DCP-J315W|DCP-J515N|DCP-J715N|DCP-J715W|MFC-250C|MFC-255CW|MFC-290C|MFC-295CN|MFC-297C|MFC-490CN|MFC-490CW|MFC-495CN|MFC-495CW|MFC-5490CN|MFC-5890CN|MFC-5895CW|MFC-6490CN|MFC-6490CW|MFC-670CD|MFC-675CD|MFC-6890CDW|MFC-6890CN|MFC-695CDN|MFC-7320|MFC-7340|MFC-735CD|MFC-7440N|MFC-7450|MFC-7840N|MFC-7840W|MFC-790CW|MFC-795CW|MFC-8370DN|MFC-8380DN|MFC-8480DN|MFC-8680DN|MFC-8880DN|MFC-8890DW|MFC-9010CN|MFC-9120CN|MFC-930CDN|MFC-9320CW|MFC-935CDN|MFC-9440CN|MFC-9450CDN|MFC-9640CW|MFC-9840CDW|MFC-990CW|MFC-J265W|MFC-J270W|MFC-J410W|MFC-J615N|MFC-J615W|MFC-J630W|MFC-J805D|MFC-J855DN)" ; then # brscan driver needed
                            if $guitool --question --text="$message_brother_scanner" ; then
                                el_dependencies_install "brscan3"
                            fi
                        else
                            # brscan 4  0.4.11
                            if echo "$brother_scanner" | grep -qsE "(ADS-2000|ADS-2000e|ADS-2100|ADS-2100e|ADS-2400N|ADS-2500We|ADS-2600We|ADS-2800W|ADS-3000N|ADS-3600W|DCP-1510|DCP-1600|DCP-1608|DCP-1610NW|DCP-1610W|DCP-1618W|DCP-1619|DCP-7055|DCP-7055W|DCP-7057|DCP-7057W|DCP-7060D|DCP-7065DN|DCP-7070DW|DCP-7080|DCP-7080D|DCP-7090|DCP-7090DW|DCP-7095D|DCP-7180DN|DCP-7189DW|DCP-7190DN|DCP-7190DW|DCP-7195DW|DCP-8110D|DCP-8110DN|DCP-8112DN|DCP-8150DN|DCP-8152DN|DCP-8155DN|DCP-8157DN|DCP-8250DN|DCP-9015CDW|DCP-9017CDW|DCP-9020CDN|DCP-9020CDW|DCP-9022CDW|DCP-9030CDN|DCP-9055CDN|DCP-9270CDN|DCP-B7500D|DCP-B7520DW|DCP-B7530DN|DCP-B7535DW|DCP-J100|DCP-J105|DCP-J1100DW|DCP-J132N|DCP-J132W|DCP-J137N|DCP-J140W|DCP-J152N|DCP-J152W|DCP-J172W|DCP-J4110DW|DCP-J4120DW|DCP-J4210N|DCP-J4215N|DCP-J4220N|DCP-J4225N|DCP-J525N|DCP-J525W|DCP-J540N|DCP-J552DW|DCP-J552N|DCP-J557N|DCP-J562DW|DCP-J562N|DCP-J567N|DCP-J572DW|DCP-J572N|DCP-J577N|DCP-J582N|DCP-J587N|DCP-J725DW|DCP-J725N|DCP-J740N|DCP-J752DW|DCP-J752N|DCP-J757N|DCP-J762N|DCP-J767N|DCP-J772DW|DCP-J774DW|DCP-J785DW|DCP-J925DW|DCP-J925N|DCP-J940N|DCP-J952N|DCP-J957N|DCP-J962N|DCP-J963N|DCP-J968N|DCP-J972N|DCP-J973N|DCP-J978N|DCP-J981N|DCP-J982N|DCP-J983N|DCP-J987N|DCP-J988N|DCP-L2500D|DCP-L2510D|DCP-L2520D|DCP-L2520DW|DCP-L2530DW|DCP-L2535D|DCP-L2535DW|DCP-L2537DW|DCP-L2540DN|DCP-L2540DW|DCP-L2550DN|DCP-L2550DW|DCP-L2551DN|DCP-L2560DW|DCP-L3510CDW|DCP-L3550CDW|DCP-L3551CDW|DCP-L5500D|DCP-L5500DN|DCP-L5502DN|DCP-L5600DN|DCP-L5602DN|DCP-L5650DN|DCP-L5652DN|DCP-L6600DW|DCP-L8400CDN|DCP-L8410CDW|DCP-L8450CDW|DCP-T300|DCP-T310|DCP-T500W|DCP-T510W|DCP-T700W|DCP-T710W|FAX-2940|FAX-2950|FAX-2990|FAX-7860DW|FAX-L2700DN|FAX-L2710DN|HL-2280DW|HL-3180CDW|HL-J6000CDW|HL-J6000DW|HL-J6100DW|HL-L2380DW|HL-L2390DW|HL-L2395DW|HL-L3290CDW|MFC-1810|MFC-1900|MFC-1906|MFC-1908|MFC-1910NW|MFC-1910W|MFC-1919NW|MFC-7240|MFC-7290|MFC-7360|MFC-7360N|MFC-7362N|MFC-7365DN|MFC-7380|MFC-7390|MFC-7460DN|MFC-7470D|MFC-7480D|MFC-7490D|MFC-7860DN|MFC-7860DW|MFC-7880DN|MFC-7889DW|MFC-7890DN|MFC-7895DW|MFC-8510DN|MFC-8512DN|MFC-8515DN|MFC-8520DN|MFC-8530DN|MFC-8535DN|MFC-8540DN|MFC-8690DW|MFC-8710DW|MFC-8712DW|MFC-8810DW|MFC-8910DW|MFC-8912DW|MFC-8950DW|MFC-8952DW|MFC-9125CN|MFC-9130CW|MFC-9140CDN|MFC-9142CDN|MFC-9150CDN|MFC-9325CW|MFC-9330CDW|MFC-9332CDW|MFC-9335CDW|MFC-9340CDW|MFC-9342CDW|MFC-9350CDW|MFC-9460CDN|MFC-9465CDN|MFC-9560CDW|MFC-9970CDW|MFC-B7700D|MFC-B7710DN|MFC-B7715DW|MFC-B7720DN|MFC-J1300DW|MFC-J1500N|MFC-J1605DN|MFC-J200|MFC-J2310|MFC-J2320|MFC-J2330DW|MFC-J245|MFC-J2510|MFC-J2720|MFC-J2730DW|MFC-J280W|MFC-J285DW|MFC-J3520|MFC-J3530DW|MFC-J3720|MFC-J3930DW|MFC-J425W|MFC-J430W|MFC-J4310DW|MFC-J4320DW|MFC-J432W|MFC-J435W|MFC-J4410DW|MFC-J4420DW|MFC-J450DW|MFC-J4510DW|MFC-J4510N|MFC-J4520DW|MFC-J460DW|MFC-J4610DW|MFC-J4620DW|MFC-J4625DW|MFC-J470DW|MFC-J4710DW|MFC-J4720N|MFC-J4725N|MFC-J475DW|MFC-J480DW|MFC-J4810DN|MFC-J485DW|MFC-J4910CDW|MFC-J491DW|MFC-J497DW|MFC-J5320DW|MFC-J5330DW|MFC-J5335DW|MFC-J5520DW|MFC-J5620CDW|MFC-J5620DW|MFC-J5625DW|MFC-J5630CDW|MFC-J5720CDW|MFC-J5720DW|MFC-J5730DW|MFC-J5820DN|MFC-J5830DW|MFC-J5845DW|MFC-J5910CDW|MFC-J5910DW|MFC-J5920DW|MFC-J5930DW|MFC-J5945DW|MFC-J625DW|MFC-J650DW|MFC-J6510DW|MFC-J6520DW|MFC-J6530DW|MFC-J6535DW|MFC-J6545DW|MFC-J6570CDW|MFC-J6573CDW|MFC-J6580CDW|MFC-J6583CDW|MFC-J6710CDW|MFC-J6710DW|MFC-J6720DW|MFC-J6730DW|MFC-J6770CDW|MFC-J680DW|MFC-J690DW|MFC-J6910CDW|MFC-J6910DW|MFC-J6920DW|MFC-J6925DW|MFC-J6930DW|MFC-J6935DW|MFC-J6945DW|MFC-J6947DW|MFC-J6970CDW|MFC-J6973CDW|MFC-J6975CDW|MFC-J6980CDW|MFC-J6983CDW|MFC-J6990CDW|MFC-J6995CDW|MFC-J6997CDW|MFC-J6999CDW|MFC-J705D|MFC-J710D|MFC-J720D|MFC-J727D|MFC-J730DN|MFC-J737DN|MFC-J738DN|MFC-J775DW|MFC-J805DW|MFC-J810DN|MFC-J815DW|MFC-J820DN|MFC-J825DW|MFC-J825N|MFC-J827DN|MFC-J830DN|MFC-J835DW|MFC-J837DN|MFC-J840N|MFC-J860DN|MFC-J870DW|MFC-J870N|MFC-J875DW|MFC-J877N|MFC-J880DW|MFC-J880N|MFC-J885DW|MFC-J887N|MFC-J890DN|MFC-J890DW|MFC-J893N|MFC-J895DW|MFC-J897DN|MFC-J898N|MFC-J900DN|MFC-J903N|MFC-J907DN|MFC-J955DN|MFC-J960DN|MFC-J980DN|MFC-J985DW|MFC-J987DN|MFC-J990DN|MFC-J995DW|MFC-J997DN|MFC-J998DN|MFC-L2680W|MFC-L2685DW|MFC-L2690DW|MFC-L2700D|MFC-L2700DN|MFC-L2700DW|MFC-L2705DW|MFC-L2707DW|MFC-L2710DN|MFC-L2710DW|MFC-L2713DW|MFC-L2715D|MFC-L2715DW|MFC-L2717DW|MFC-L2720DN|MFC-L2720DW|MFC-L2730DN|MFC-L2730DW|MFC-L2740DW|MFC-L2750DW|MFC-L2759DW|MFC-L2770DW|MFC-L3710CW|MFC-L3730CDN|MFC-L3735CDN|MFC-L3745CDW|MFC-L3750CDW|MFC-L3770CDW|MFC-L5700DN|MFC-L5700DW|MFC-L5702DW|MFC-L5705DW|MFC-L5750DW|MFC-L5755DW|MFC-L5800DW|MFC-L5802DW|MFC-L5850DW|MFC-L5900DW|MFC-L5902DW|MFC-L6700DW|MFC-L6702DW|MFC-L6750DW|MFC-L6800DW|MFC-L6900DW|MFC-L6902DW|MFC-L8600CDW|MFC-L8610CDW|MFC-L8650CDW|MFC-L8690CDW|MFC-L8850CDW|MFC-L8900CDW|MFC-L9550CDW|MFC-L9570CDW|MFC-T4500DW|MFC-T800W|MFC-T810W|MFC-T910DW)" ; then # brscan driver needed
                                if $guitool --question --text="$message_brother_scanner" ; then
                                    el_dependencies_install "brscan4"
                                fi
                            else
                                # brscan 5  1.3.0
                                if echo "$brother_scanner" | grep -qsE "(ADS-1200|ADS-1250W|ADS-1700W|ADS-2400N|ADS-2800W|ADS-3000N|ADS-3600W|DCP-7090|DCP-7095D|DCP-7190DN|DCP-7195DW|DCP-9030CDN|DCP-B7500D|DCP-B7520DW|DCP-B7530DN|DCP-B7535DW|DCP-J1100DW|DCP-J572DW|DCP-J572N|DCP-J577N|DCP-J582N|DCP-J772DW|DCP-J774DW|DCP-J972N|DCP-J973N|DCP-J978N|DCP-J981N|DCP-J982N|DCP-J988N|DCP-L2510D|DCP-L2530DW|DCP-L2535D|DCP-L2535DW|DCP-L2537DW|DCP-L2550DN|DCP-L2550DW|DCP-L2551DN|DCP-L3510CDW|DCP-L3550CDW|DCP-L3551CDW|DCP-L5500D|DCP-L5500DN|DCP-L5502DN|DCP-L5600DN|DCP-L5602DN|DCP-L5650DN|DCP-L5652DN|DCP-L6600DW|DCP-T310|DCP-T510W|DCP-T710W|FAX-L2710DN|HL-J6000CDW|HL-J6000DW|HL-J6100DW|HL-L2390DW|HL-L2395DW|HL-L3290CDW|MFC-7390|MFC-7490D|MFC-7890DN|MFC-7895DW|MFC-8530DN|MFC-8535DN|MFC-8540DN|MFC-9150CDN|MFC-9350CDW|MFC-B7700D|MFC-B7715DW|MFC-B7720DN|MFC-J1300DW|MFC-J1500N|MFC-J1605DN|MFC-J2330DW|MFC-J2730DW|MFC-J3530DW|MFC-J3930DW|MFC-J491DW|MFC-J497DW|MFC-J5330DW|MFC-J5335DW|MFC-J5630CDW|MFC-J5730DW|MFC-J5830DW|MFC-J5845DW|MFC-J5930DW|MFC-J5945DW|MFC-J6530DW|MFC-J6535DW|MFC-J6545DW|MFC-J6580CDW|MFC-J6583CDW|MFC-J6730DW|MFC-J690DW|MFC-J6930DW|MFC-J6935DW|MFC-J6945DW|MFC-J6947DW|MFC-J6980CDW|MFC-J6983CDW|MFC-J6995CDW|MFC-J6997CDW|MFC-J6999CDW|MFC-J738DN|MFC-J775DW|MFC-J805DW|MFC-J815DW|MFC-J890DW|MFC-J893N|MFC-J895DW|MFC-J898N|MFC-J903N|MFC-J995DW|MFC-J998DN|MFC-L2690DW|MFC-L2710DN|MFC-L2710DW|MFC-L2713DW|MFC-L2715D|MFC-L2715DW|MFC-L2717DW|MFC-L2730DN|MFC-L2730DW|MFC-L2750DW|MFC-L2770DW|MFC-L3710CW|MFC-L3730CDN|MFC-L3735CDN|MFC-L3745CDW|MFC-L3750CDW|MFC-L3770CDW|MFC-L5700DN|MFC-L5700DW|MFC-L5702DW|MFC-L5750DW|MFC-L5755DW|MFC-L5800DW|MFC-L5802DW|MFC-L5850DW|MFC-L5900DW|MFC-L5902DW|MFC-L6700DW|MFC-L6702DW|MFC-L6750DW|MFC-L6800DW|MFC-L6900DW|MFC-L6902DW|MFC-T4500DW|MFC-T810W|MFC-T910DW)" ; then # brscan driver needed
                                    if $guitool --question --text="$message_brother_scanner" ; then
                                        el_dependencies_install "brscan5"
                                    fi
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        fi
    fi
    # - scanners support }}}
    # mark a working and healthy status {{{
    # set a minimal working state, to make sure that elive is not broken by a possible upgrade
    if ! ((is_nodelay)) ; then
        el_mark_state
        machine_id="$( grep "^machine-id: " /etc/elive-version 2>/dev/null | sed -e 's|^machine-id: ||g' | tail -1 )"
        if [[ -z "$machine_id" ]] ; then
            if el_check_sudo_automated ; then
                sudo -H bash -c 'source /usr/lib/elive-tools/functions ; id="$( el_get_machine_id )" ; sed -i "/^machine-id:.*$/d" /etc/elive-version ; echo "machine-id: $id" >> /etc/elive-version'
                machine_id="$( grep "^machine-id: " /etc/elive-version 2>/dev/null | sed -e 's|^machine-id: ||g' | tail -1 )"
            fi
        fi
        if [[ -z "$machine_id" ]] ; then
            el_error "unable to get machine-id from /etc/elive-version"
        fi
        architecture="$( source /usr/lib/elive-tools/functions ; el_architecture "host" )"
        return_status=0

        if [[ -n "$MACHINE_VIRTUAL" ]] ; then
            custom="machine_virtual"
        else
            custom="machine_real"
        fi

        if [[ -n "$machine_id" ]] ; then
            if ! grep -Fqs "thanatests" /proc/cmdline ; then
                if grep -Fqs "boot=live" /proc/cmdline ; then
                    if ! grep -Fqs "persistence" /proc/cmdline ; then
                        # live mode:
                        if ! el_verify_internet ; then
                            sleep 120
                            if ! el_verify_internet ; then
                                sleep 180
                            fi
                        fi
                        if el_verify_internet ; then
                            echo -e "ELIVE_DATA_TYPE: 1.0::${machine_id}::transfer::text::livedesktop::0::$(whoami)::${conf_send_debug_reports_email}::${return_status}::${custom}::${architecture}::${eliveversion}::${SOURCE}::" | timeout 8 nc www.elivecd.org 60008 -w 6 1>/dev/null 2>&1
                        fi
                    fi
                else
                    # installed mode:
                    if el_verify_internet ; then
                        echo -e "ELIVE_DATA_TYPE: 1.0::${machine_id}::transfer::text::healthy::0::$(whoami)::${conf_send_debug_reports_email}::${return_status}::${custom}::${architecture}::${eliveversion}::${SOURCE}::" | timeout 8 nc www.elivecd.org 60008 -w 6 1>/dev/null 2>&1
                    fi
                fi
            fi
        fi
    fi

    # }}}

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

