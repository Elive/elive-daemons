#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-daemons"
export TEXTDOMAIN

main(){
    # pre {{{
    local architecture return_status machine_id

    guitool="zenity --window-icon=/usr/share/icons/Elive/scalable/apps/logo-elive.png"
    el_mark_state

    case "$( cat /etc/debian_version )" in
        10.*|"buster"*)
            is_buster=1
            ;;
        7.*|"wheezy"*)
            is_wheezy=1
            ;;
    esac

    eliveversion="$( awk '$1 ~ /elive-version/ {($1="");print $0}' /etc/elive-version | sed 's/^\ //g' )"
    case "$eliveversion" in
        *.7.*)  is_alpha=1 ; ;;
        *.8.*)  is_beta=1 ; ;;
        *.9.*)  is_rc=1 ; ;;
        *.0.*)  is_stable=1 ; ;;
    esac

    # }}}
    # dump the dbus address to use in other places if we need to
    if [[ -n "$DBUS_SESSION_BUS_ADDRESS" ]] ; then
        echo "$DBUS_SESSION_BUS_ADDRESS" > "$HOME/.cache/dbus-session-address-last.txt"
    fi

    # wait desktop ready
    if ! ((is_interactive)) ; then
        sleep 20
    fi

    # get configurations
    el_config_get

    # was the shutdown forced? {{{
    #
    if [[ -e "/var/tmp/elivehealth/elive-system-shutdown-forced" ]] && grep -qsE "^(yes|user notified pre)$" "/var/tmp/elivehealth/elive-system-shutdown-forced" ; then
        local message_shutdown_warn
        message_shutdown_warn="$( printf "$( eval_gettext "You previously turned off the computer incorrectly. It is very bad for your data to force shutdown. You should shutdown the computer from the System option in the menu. If your computer freezes without reason, try a different Kernel version." )" "" )"
        # warn the user
        el_notify "important" "utilities-system-monitor" "$( eval_gettext "Forced shutdown detected" )" "$message_shutdown_warn"

        # remove the verification file
        echo "user notified post" > "/var/tmp/elivehealth/elive-system-shutdown-forced"
    fi

    # }}}
    # max temperature reached? {{{
    #
    _notification_max_temperature_reached="$( cat /var/log/syslog /var/log/kern.log /var/log/syslog.1 /var/log/kern.log.1 2>/dev/null | grep "critical temperature reached.*shutting down" | sort -u | tr '\n' ' ' )"

    if [[ -n "$_notification_max_temperature_reached" ]] && [[ "$_notification_max_temperature_reached" != "$conf_notification_max_temperature_reached" ]] ; then
        $guitool --warning --text="$( eval_gettext "Elive detected that your computer reached a critical temperature and forced a shutdown for its safety. This is commonly caused in old computers where dust is accumulated in the fans. To solve the issue you should remove the dust from your computer by opening it (do not blow in it). Optionally you can set your CPU speed gadget to work a little slower, this can make your computer more reliable, but it will be a little bit slower." )"

        # make sure to not show again the message if we already did it
        conf_notification_max_temperature_reached="$_notification_max_temperature_reached"
        el_config_save "conf_notification_max_temperature_reached"
    fi

    # }}}
    # filesystem almost full {{{
    #
    # default values to check
    percent_max="92"
    percent_max_crit="95"

    percent="$( LC_ALL=C df -m | awk '{if ($6 == "/home") print $5}' | head -1 )"
    percent="${percent%\%}"
    # no extra /home? use /
    if [[ -z "$percent" ]] ; then
        percent="$( LC_ALL=C df -m | awk '{if ($6 == "/") print $5}' | head -1 )"
        percent="${percent%\%}"
        # root almost full, always warning
        if [[ "${percent}" -ge "$percent_max_crit" ]] ; then
            el_notify "normal" "gparted" "$( eval_gettext "Hard disk is almost full" )" "$( eval_gettext "Your root partition is almost full, we recommend to remove some unneeded software or to resize your partition to be bigger and reinstall Elive with the special options if needed. Your installation could become unbootable if the disk is full." )"
        fi
    fi

    if [[ "${percent}" -ge "$percent_max" ]] ; then
        $guitool --warning --text="$( eval_gettext "Your partition is almost full. We recommend you to delete old files to free up some space, your installation could \"brick\" (be unusable) if it has no space left." )"

        if $guitool --question --text="$( eval_gettext "Do you want Elive to clean automatically some unneeded and temporary files now?" )" ; then
            # delete unneeded things now
            find "$HOME/.cache" -not -path "*/.cache/zsh/*" -not -path "*/.cache/elive*" -type f -delete
            find "$HOME/.thumbnails" -type f -delete

            killall rhythmbox
            killall chromium
            killall google-chrome
            killall opera
            killall palemoon
            killall efreetd
            killall firefox-esr
            killall picard
            killall netsurf
            killall opera
            sync
            rm -rf "${HOME}/.cache/mesa_shader_cache" "${HOME}/.cache/chromium" "${HOME}/.cache/google-chrome" "${HOME}/.cache/moonchild_productions" "${HOME}/.cache/thumbnails" "${HOME}/.cache/mozilla" "${HOME}/.cache/MuzicBrainz" "${HOME}/.cache/network" "${HOME}/.cache/rhythmbox" "${HOME}/.cache/efreet" "${HOME}/.cache/netsurf" "${HOME}/.cache/el_speak" "${HOME}/.cache/opera"

            killall -9 efreetd

            # clean compiling caches
            ccache -c -C 2>/dev/null || true

            # free the trash
            find "$HOME/.local/share/Trash" -type f -delete

            : > "$HOME/.xsession-errors"

            # wine apps
            #rm -rf ${DHOME}/${result}/.local/share/applications/wine
            #rm -rf ${DHOME}/${result}/.local/share/desktop-directories/wine* 2>/dev/null
            #rm -rf ${DHOME}/${result}/.wine 2>/dev/null
            sync
        fi
        percent_new="$( LC_ALL=C df -m | awk '{if ($6 == "/home") print $5}' | head -1 )"
        percent_new="${percent_new%\%}"
        if [[ -z "$percent_new" ]] ; then
            percent_new="$( LC_ALL=C df -m | awk '{if ($6 == "/") print $5}' | head -1 )"
            percent_new="${percent_new%\%}"
        fi

        local message_ask_for_scan
        message_ask_for_scan="$( printf "$( eval_gettext "Your hard disk used space was %s and now is %s. Do you want to scan your files to know where the bigger usage waste belongs to?" )" "${percent}%" "${percent_new}%" )"

        if $guitool --question --text="$message_ask_for_scan" ; then
            if ! el_dependencies_check "baobab" ; then
                el_dependencies_install "baobab"
            fi
            baobab "$HOME" &

            sleep 3
            $guitool --info --text="$( eval_gettext "Wait that the scanning finishes to see the results. In the meantime we recommend to delete every unneeded file from your Downloads folder which is probably where most of the wasted space happens." )"
        fi
    fi


    # }}}
    # Disk health {{{
    #

    if [[ -s "/etc/elive/disks-health" ]] ; then
        source "/etc/elive/disks-health"

        # gshock reports
        if [[ "$count_gshock" -gt 0 ]] ; then
            if [[ "$count_gshock" != "$conf_count_gshock" ]] ; then
                el_notify "normal" "utilities-system-monitor" "Elive $( eval_gettext "Alert of shake off" )" "$( eval_gettext "Please do not shake the computer while it's powered on, doing so is very bad for your hard disk. Shocks received so far:" ) $count_gshock"

                # save to not repeat
                conf_count_gshock="$count_gshock"
                el_config_save "conf_count_gshock"
            fi
        fi

        # bad blocks reports
        if [[ "$count_sectors_reallocated" -gt 0 ]] ; then
            if [[ "$count_sectors_reallocated" != "$conf_count_sectors_reallocated" ]] ; then
                if [[ -z "$conf_count_sectors_reallocated" ]] ; then
                    conf_count_sectors_reallocated="0"
                fi

                local message_badblocks
                message_badblocks="$( printf "$( eval_gettext "One of your hard disks has some bad blocks. This is not exactly bad but shows a degradation in your hard disk health. The problem appears when data wants to be saved in a bad block that has not been found yet. This message is basically to remind you that it is important to save backups of your important or personal information in order to never lose it, since your hard disk is starting to have a degraded state. If this message appears regularly, we suggest replacing your hard drive." )" "" )"
                local message_badblocks_counted
                message_badblocks_counted="$( printf "$( eval_gettext "Bad blocks registered:" )" "" )"
                local message_badblocks_counted_before
                message_badblocks_counted_before="$( printf "$( eval_gettext "Previously registered:" )" "" )"

                $guitool --warning --text="$message_badblocks $message_badblocks_counted $count_sectors_reallocated $message_badblocks_counted_before $conf_count_sectors_reallocated"

                # save to not repeat
                conf_count_sectors_reallocated="$count_sectors_reallocated"
                el_config_save "conf_count_sectors_reallocated"
            fi
        fi

        # bad blocks reports
        if [[ "$count_sectors_pending" -gt 0 ]] ; then
            if [[ "$count_sectors_pending" != "$conf_count_sectors_pending" ]] ; then
                if [[ -z "$conf_count_sectors_pending" ]] ; then
                    conf_count_sectors_pending="0"
                fi

                local message_badblocks_pending
                message_badblocks_pending="$( printf "$( eval_gettext "One or more bad blocks have been found on your system. A few bad blocks can be handled by the system, but more bad blocks could lead to system crashes and/or serious data loss. We recommend to replace the hard drive as soon as possible (it's recommended to be an SSD for speed and reliability), if this message occurs often." )" "" )"
                local message_badblocks_pending_counted
                message_badblocks_pending_counted="$( printf "$( eval_gettext "Pending sectors for reallocation:" )" "" )"

                $guitool --warning --text="$message_badblocks_pending $message_badblocks_pending_counted $count_sectors_pending"

                # save to not repeat
                conf_count_sectors_pending="$count_sectors_pending"
                el_config_save "conf_count_sectors_pending"
            fi
        fi
    fi


    # }}}
    # stability status {{{
    if ((is_buster)) && ((is_alpha)) ; then
        if [[ -n "$E_START" ]] && [[ -f "/usr/share/doc/e17-stable/versions.history.Elive.gz" ]] ; then
            el_notify important bomb "$( eval_gettext "Remember" )" "$( eval_gettext "The E17 desktop is not working correctly on the new versions. It's slow, consumes much CPU, has no systray, no special effects, and menus or windows disappear. We recommend you to switch to E16 which is much better integrated as of now, or install the latest version of Enlightenment by running \"apui enlightenment\" in the terminal." )"
        fi
    fi

    # - stability status }}}
    # repo issues {{{
    repos="$( grep -H "^deb " /etc/apt/sources.list /etc/apt/sources.list.d/* )"
    if ((is_buster)) ; then
        if echo "$repos" | grep -qsE "(\Wwheezy|\Wbullseye|\Wtesting|\Wsid|ubuntu|ppa.launchpad|\Wrestricted)" ; then
            el_notify normal computer-fail "$( eval_gettext "Wrong repositories" )" "$( eval_gettext "You have mixed repositories configured in your system, this is strongly discouraged and can make your system break if you don't know what you're doing. If you have issues in your system we suggest to reinstall Elive and not to modify the default provided repositories." )"
        fi
    fi
    # - repo issues }}}

    # delayed actions
    sleep 20

    # scanners support {{{
    if ((is_buster)) ; then
        if lsusb | grep -qs "Brother Industries" || grep -qs "Brother Industries" /tmp/.hwinfo.txt 2>/dev/null ; then
            if dpkg -l | grep -qsE "^ii\s+" && ! dpkg -l | grep -qsE "^ii\s+brscan" ; then
                # get models
                brother_scanner="$( cat /tmp/.hwinfo 2>/dev/null | grep "Brother Industries" ; lsusb | grep "Brother Industries" )"

                local message_brother_scanner
                message_brother_scanner="$( printf "$( eval_gettext "Woohoo! Elive can make your Brother Scanner work directly! Proceed with our magic?" )" "" )"

                # brscan
                if echo "$brother_scanner" | grep -qsE "(DCP-1000|DCP-1400|DCP-8020|DCP-8025D|DCP-8040|DCP-8045|DFAX-4750e|FAX-5750e|MFC-3220C|MFC-3320CN|MFC-3420C|MFC-3820CN|MFC-4800|MFC-6800|MFC-8220|MFC-8420|MFC-8440|MFC-8500|MFC-8820D|MFC-8840D|MFC-9030|MFC-9070|MFC-9160|MFC-9180|MFC-9660|MFC-9700|MFC-9760|MFC-9800|MFC-9860|MFC-9880)" ; then
                    # brscan driver needed
                    if $guitool --question --text="$message_brother_scanner" ; then
                        el_dependencies_install "brscan"
                    fi
                else
                    # brscan 2
                    if echo "$brother_scanner" | grep -qsE "(DCP-110C|DCP-115C|DCP-117C|DCP-120C|DCP-130C|DCP-135C|DCP-150C|DCP-153C|DCP-155C|DCP-310CN|DCP-315CN|DCP-330C|DCP-340CW|DCP-350C|DCP-353C|DCP-357C|DCP-540CN|DCP-560CN|DCP-7010|DCP-7020|DCP-7025|DCP-750CW|DCP-770CW|DCP-8060|DCP-8065DN|MFC-210C|MFC-215C|MFC-230C|MFC-235C|MFC-240C|MFC-260C|MFC-3240C|MFC-3340CN|MFC-3360C|MFC-410CN|MFC-420CN|MFC-425CN|MFC-440CN|MFC-465CN|MFC-5440CN|MFC-5460CN|MFC-5840CN|MFC-5860CN|MFC-620CN|MFC-640CW|MFC-660CN|MFC-665CW|MFC-680CN|MFC-685CW|MFC-7220|MFC-7225N|MFC-7420|MFC-7820N|MFC-820CW|MFC-845CW|MFC-8460N|MFC-8660DN|MFC-8670DN|MFC-885CW|MFC-8860DN|MFC-8870DW|MFC-9420CN)" ; then
                        # brscan driver needed
                        if $guitool --question --text="$message_brother_scanner" ; then
                            el_dependencies_install "brscan2"
                        fi
                    else
                        # brscan 3
                        if echo "$brother_scanner" | grep -qsE "(DCP-145C|DCP-163C|DCP-165C|DCP-167C|DCP-185C|DCP-195C|DCP-197C|DCP-365CN|DCP-373CW|DCP-375CW|DCP-377CW|DCP-383C|DCP-385C|DCP-387C|DCP-395CN|DCP-585CW|DCP-6690CW|DCP-7030|DCP-7040|DCP-7045N|DCP-8070D|DCP-8080DN|DCP-8085DN|DCP-9010CN|DCP-9040CN|DCP-9042CDN|DCP-9045CDN|DCP-J125|DCP-J315W|DCP-J515W|DCP-J715W|MFC-250C|MFC-255CW|MFC-257CW|MFC-290C|MFC-295CN|MFC-297C|MFC-490CW|MFC-495CW|MFC-5490CN|MFC-5890CN|MFC-5895CW|MFC-6490CW|MFC-6890CDW|MFC-7320|MFC-7340|MFC-7345N|MFC-7440N|MFC-7450|MFC-7840N|MFC-7840W|MFC-790CW|MFC-795CW|MFC-8370DN|MFC-8380DN|MFC-8480DN|MFC-8680DN|MFC-8880DN|MFC-8890DW|MFC-9010CN|MFC-9120CN|MFC-9320CW|MFC-9440CN|MFC-9450CDN|MFC-9840CDW|MFC-990CW|MFC-J220|MFC-J265W|MFC-J270W|MFC-J410|MFC-J410W|MFC-J415W|MFC-J615W|MFC-J630W)" ; then # brscan driver needed
                            if $guitool --question --text="$message_brother_scanner" ; then
                                el_dependencies_install "brscan3"
                            fi
                        else
                            # brscan 4
                            if echo "$brother_scanner" | grep -qsE "(DCP-1510|DCP-1510R|DCP-1511|DCP-1512|DCP-1512R|DCP-1518|DCP-7055|DCP-7055W|DCP-7057|DCP-7057WR|DCP-7060D|DCP-7065DN|DCP-7070DW|DCP-8110D|DCP-8110DN|DCP-8112DN|DCP-8150DN|DCP-8152DN|DCP-8155DN|DCP-8157DN|DCP-8250DN|DCP-9020CDW|DCP-9055CDN|DCP-9270CDN|DCP-J132W|DCP-J140W|DCP-J152W|DCP-J172W|DCP-J4110DW|DCP-J525W|DCP-J552DW|DCP-J725DW|DCP-J752DW|DCP-J925DWFAX-2950FAX-2990HL-2280DW|MFC-1810|MFC-1810R|MFC-1811|MFC-1813|MFC-1815|MFC-1815R|MFC-1818|MFC-7240|MFC-7290|MFC-7360|MFC-7360N|MFC-7362N|MFC-7365DN|MFC-7460DN|MFC-7470D|MFC-7860DN|MFC-7860DW|MFC-8510DN|MFC-8512DN|MFC-8515DN|MFC-8520DN|MFC-8690DW|MFC-8710DW|MFC-8712DW|MFC-8810DW|MFC-8910DW|MFC-8912DW|MFC-8950DW/|MFC-8950DWT|MFC-8952DW|MFC-9125CN|MFC-9130CW|MFC-9140CDN|MFC-9325CW|MFC-9330CDW|MFC-9340CDW|MFC-9460CDN|MFC-9465CDN|MFC-9560CDW|MFC-9970CDW|MFC-J2310|MFC-J245|MFC-J2510|MFC-J280W|MFC-J285DW|MFC-J425W|MFC-J430W|MFC-J4310DW|MFC-J432W|MFC-J435W|MFC-J4410DW|MFC-J450DW|MFC-J4510DW|MFC-J4610DW|MFC-J470DW|MFC-J4710DW|MFC-J475DW|MFC-J5910DW|MFC-J625DW|MFC-J650DW|MFC-J6510DW|MFC-J6710DW|MFC-J6910DW|MFC-J825DW|MFC-J835DW|MFC-J870DW|MFC-J875DW|ADS-1000WwADS-1100W|ADS-1500W|ADS-1600W|ADS-2000|ADS-2100|ADS-2500W|ADS-2600W)" ; then # brscan driver needed
                                if $guitool --question --text="$message_brother_scanner" ; then
                                    el_dependencies_install "brscan4"
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        fi
    fi
    # - scanners support }}}
    # mark a working and healthy status {{{
    # set a minimal working state, to make sure that elive is not broken by a possible upgrade
    machine_id="$( grep "^machine-id: " /etc/elive-version 2>/dev/null | sed -e 's|^machine-id: ||g' | tail -1 )"
    if [[ -z "$machine_id" ]] ; then
        machine_id="$( cat /etc/machine-id 2>/dev/null | tail -1 )"
    fi
    architecture="$( el_architecture "host" )"
    return_status=0

    source /etc/elive/machine-profile 2>/dev/null || true
    if [[ -n "$MACHINE_VIRTUAL" ]] ; then
        custom="machine_virtual"
    else
        custom="machine_real"
    fi

    if [[ -n "$machine_id" ]] ; then
        if grep -qs "boot=live" /proc/cmdline ; then
            if ! grep -qs "persistence" /proc/cmdline ; then
                # live mode:
                if ! el_verify_internet ; then
                    sleep 120
                    if ! el_verify_internet ; then
                        sleep 180
                    fi
                fi
                if el_verify_internet ; then
                    echo -e "ELIVE_DATA_TYPE: 1.0::${machine_id}::transfer::text::liveboot::0::::::${return_status}::${custom}::${architecture}::${eliveversion}::${SOURCE}::" | timeout 8 nc www.elivecd.org 60008 -w 6 1>/dev/null 2>&1
                fi
            fi
        else
            # installed mode:
            if el_verify_internet ; then
                echo -e "ELIVE_DATA_TYPE: 1.0::${machine_id}::transfer::text::healthy::0::::::${return_status}::${custom}::${architecture}::${eliveversion}::${SOURCE}::" | timeout 8 nc www.elivecd.org 60008 -w 6 1>/dev/null 2>&1
            fi
        fi
    fi

    # }}}

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

