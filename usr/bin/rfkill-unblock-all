#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
. gettext.sh
TEXTDOMAIN="elive-daemons"
export TEXTDOMAIN

el_config_get

# include sbin in our PATH since its needed sometimes, and there's nothing wrong by using it!
if [[ "$PATH" != *"/usr/sbin"* ]] ; then
    # needed for: laptop-detect
    export PATH="${PATH}:/usr/local/sbin:/usr/sbin:/sbin"
fi


if laptop-detect ; then
    if ! el_verify_internet fast ; then
        if ! el_dependencies_check "rfkill" 2>/dev/null ; then
            #el_error "package rfkill missing"
            exit
        fi

        while read -ru 3 line
        do
            # know the possible id to unblock
            if echo "$line" | LC_ALL=C grep -qsE "^[[:digit:]]+:.*Wireless " ; then
                id="$( echo "$line" | sed -e 's|: .*$||g' )"
                #el_debug "ID is $id"
            fi

            # unblock Soft if we are blocked
            if echo "$line" | LC_ALL=C grep -qsi "Soft blocked: yes" ; then
                timeout 10 sudo /usr/sbin/rfkill unblock "$id" 2>/dev/null 1>&2
                #sleep 1
                # we can have multiple devices so this result is not very reliable, don't use it as an important result:
                if /usr/sbin/rfkill list 2>/dev/null | grep -qsi "Soft blocked: no" ; then
                    is_unblocked=1
                fi
            fi

            # unblock Hard if we are blocked
            if echo "$line" | LC_ALL=C grep -qsi "Hard blocked: yes" ; then
                # try to unblock but it may not work
                timeout 10 sudo /usr/sbin/rfkill unblock "$id" 2>/dev/null 1>&2
                #if echo "$line" | LC_ALL=C grep -qsi "Hard blocked: no" ; then
                #is_unblocked=1
                #else
                if /usr/sbin/rfkill list 2>/dev/null | grep -qsi "Hard blocked: yes" ; then

                    # wait that the desktop is loaded
                    sleep 3

                    # notify
                    if ! ((is_user_notified)) && [[ -n "$DISPLAY" ]] ; then
                        if grep -qs "boot=live" /proc/cmdline ; then
                            zenity --warning --text="$( eval_gettext "Wi-Fi is disabled by hardware. You can activate it from the switch or with its keyboard hotkey; this can differ between models but is typically labeled." )"
                        else
                            #el_warning "Wifi is disabled. You can activate it from the interruptor, switch or a keyboard hotkey."
                            el_notify normal wifi "$( eval_gettext "Wi-Fi is disabled" )" "$( eval_gettext "You can activate it from the switch or with its keyboard hotkey." )"
                        fi

                        is_user_notified=1
                    fi
                fi
            fi


        done 3<<< "$( /usr/sbin/rfkill list 2>/dev/null )"


        if ((is_unblocked)) ; then
            el_info "Wifi has been reactivated"
        else
            el_debug "Wifi was already active"
        fi
    fi
fi


# b43 checks (plugged new device)
if [[ "$( lspci -nn -d "14e4:" | wc -l )" -gt 0 ]] && ! ((conf_is_b43_unworking_notified)) ; then
    # scan test
    for dev in $( LC_ALL=C /sbin/iwconfig 2>&1 | grep IEEE | awk '{print $1}' | grep "[[:alpha:]]" | tr '\n' ' ' )
    do
        [[ -z "$dev" ]] && continue
        if iwlist $dev scan 1>/dev/null 2>&1 ; then
            is_scanning_working=1
        else
            sleep 20

            if iwlist $dev scan 1>/dev/null 2>&1 ; then
                is_scanning_working=1
            fi
        fi
    done

    if ! ((is_scanning_working)) ; then

        if grep -qs "boot=live" /proc/cmdline ; then
            sudo -H /usr/sbin/b43-driver-fixes
        else
            gksu /usr/sbin/b43-driver-fixes
        fi

        # scan test
        for dev in $( LC_ALL=C /sbin/iwconfig 2>&1 | grep IEEE | awk '{print $1}' | grep "[[:alpha:]]" | tr '\n' ' ' )
        do
            [[ -z "$dev" ]] && continue
            if iwlist $dev scan 1>/dev/null 2>&1 ; then
                is_scanning_working=1
            fi
        done

        # show the wifi's to the user
        if ((is_scanning_working)) ; then
            # notify the user
            notify-send -t 8000 -i desktop-effects "$( eval_gettext "Broadcom B43 Wi-Fi" )" "$( eval_gettext "Your wireless device is difficult to set up on Linux systems, but Elive was able to make it working for you!" )"

            # show him the wifis
            sleep 3
            nm-applet --popup &
        fi


        # save a conf to not run this again (if failed)
        conf_is_b43_unworking_notified=1
        el_config_save "conf_is_b43_unworking_notified"
    fi
fi


# vim: filetype=sh :
