#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
#EL_REPORTS="1"
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-daemons"
export TEXTDOMAIN


main(){
    # pre {{{
    if [[ "$UID" = 0 ]] ; then
        el_error "This is not meant to be run as root, use it from your user instead"
        exit 1
    fi

    # }}}

    # close browsers first
    killall google-chrome chromium firefox firefox-esr palemoon midori opera vivaldi 1>/dev/null 2>&1 || true
    sync
    # wait for browsers to terminate first
    count=0
    while true ; do
        if pidof google-chrome chromium firefox firefox-esr palemoon midori opera vivaldi 1>/dev/null 2>&1 ; then
            sleep 1
        else
            break
        fi
        count="$(( $count + 1 ))"
        [[ "$count" -ge 20 ]] && break
    done

    killall -9 google-chrome chromium firefox firefox-esr palemoon midori opera vivaldi 1>/dev/null 2>&1 || true
    sync ; sleep 1

    # prepare
    if ! el_dependencies_check "psd" 1>/dev/null 2>&1 ; then
        el_dependencies_install "profile-sync-daemon"
    fi
    systemctl --user disable psd.service psd-resync.service 1>/dev/null 2>&1 || true
    systemctl --user stop psd.service psd-resync.service 1>/dev/null 2>&1 || true

    # configure
    if [[ -e "/var/lib/dpkg/info/google-chrome-stable.list" ]] ; then
        el_array_member_add "google-chrome" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/chromium.list" ]] ; then
        el_array_member_add "chromium" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/firefox-esr.list" ]] ; then
        el_array_member_add "firefox" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/midori.list" ]] ; then
        el_array_member_add "midori" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/opera.list" ]] ; then
        el_array_member_add "opera" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/vivaldi.list" ]] ; then
        el_array_member_add "vivaldi" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ "${#_browsers[@]}" = 1 ]] ; then
        result="${_browsers[0]}"
    else
        local message_select_browsers
        message_select_browsers="$( printf "$( eval_gettext "Select the web browsers you want to run on RAM. We suggest only selecting the one that you commonly use." )" "" )"

        result="$( for i in "${_browsers[@]}"
        do
            case "$i" in
                "google-chrome")
                    echo "TRUE"
                    echo "$i"
                    echo "Google Chrome"
                    ;;
                "chromium")
                    echo "FALSE"
                    echo "$i"
                    echo "Google Chromium (opensource)"
                    ;;
                "firefox")
                    echo "FALSE"
                    echo "$i"
                    echo "Firefox"
                    ;;
                "midori")
                    echo "FALSE"
                    echo "$i"
                    echo "Midori"
                    ;;
                "opera")
                    echo "FALSE"
                    echo "$i"
                    echo "Opera"
                    ;;
                "vivaldi")
                    echo "FALSE"
                    echo "$i"
                    echo "Vivaldi"
                    ;;
            esac
        done  | $guitool --height="200" --list --checklist --text="$message_select_browsers" --separator=" " --column="Enable" --column="ID" --column="Web Browser" --print-column=2 --hide-column=2  2>/dev/null )"
    fi
    # create a dummy conf
    rm -f "$HOME/.config/psd/psd.conf" 1>/dev/null 2>&1 || true

    # User didn't selected any browser, so do not enable anything and exit with error to be known by elive-health
    if [[ -z "$result" ]] ; then
        exit 1
    fi
    systemctl --user enable psd.service psd-resync.service
    systemctl --user start psd.service psd-resync.service
    sync
    # configure
    systemctl --user stop psd.service psd-resync.service
    sync
    sed -i -e "s|^.*USE_OVERLAYFS=\".*|USE_OVERLAYFS=\"yes\"|g" "$HOME/.config/psd/psd.conf"
    sed -i -e "s|^.*BROWSERS=\".*|BROWSERS=\"${result}\"|g" "$HOME/.config/psd/psd.conf"
    sed -i -e "s|^.*USE_BACKUPS=\".*|USE_BACKUPS=\"yes\"|g" "$HOME/.config/psd/psd.conf"
    sed -i -e "s|^.*BACKUP_LIMIT=.*|BACKUP_LIMIT=1|g" "$HOME/.config/psd/psd.conf"

    # enable daemon for user
    systemctl --user start psd.service psd-resync.service
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
