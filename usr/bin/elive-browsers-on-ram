#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
#EL_REPORTS="1"
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-daemons"
export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    echo -e "E: $(basename "$0" ) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

close_browsers(){
    # close browsers first
    killall google-chrome chromium firefox firefox-esr palemoon midori opera vivaldi 1>/dev/null 2>&1 || true
    sync
    # wait for browsers to terminate first
    count=0
    while true ; do
        if pidof google-chrome chromium firefox firefox-esr palemoon midori opera vivaldi 1>/dev/null 2>&1 ; then
            sleep 1
        else
            break
        fi
        count="$(( $count + 1 ))"
        [[ "$count" -ge 20 ]] && break
    done

    killall -9 google-chrome chromium firefox firefox-esr palemoon midori opera vivaldi 1>/dev/null 2>&1 || true
    sync ; sleep 1
}

do_stop(){
    systemctl --user stop psd.service psd-resync.service 1>/dev/null 2>&1 || true
    systemctl --user disable psd.service psd-resync.service 1>/dev/null 2>&1 || true
    sync
}
do_start(){
    systemctl --user enable psd.service psd-resync.service 1>/dev/null 2>&1 || true
    systemctl --user start psd.service psd-resync.service 1>/dev/null 2>&1 || true
    sync
}


install_deps(){
    # prepare
    if ! el_dependencies_check "psd" 1>/dev/null 2>&1 ; then
        el_dependencies_install "profile-sync-daemon"
    fi
}

do_enable(){
    # configure if needed first
    source "$HOME/.config/psd/psd.conf" 2>/dev/null || true
    if [[ -z "$BROWSERS" ]] ; then
        do_configure
    fi

    if [[ -s "$HOME/.config/psd/psd.conf" ]] ; then
        do_start
        if ! ((is_quiet)) ; then
            el_notify normal web-browser "Browsers on RAM" "$( eval_gettext "Browsers on RAM feature is now enabled. This feature also increases the lifespan of your SSD hard disk" )"
        fi
    fi

    sed -i -e 's|^.*conf_browsers_on_ram=.*$|declare -g -- conf_browsers_on_ram="1"|g' "$HOME/.config/elive/elive-tools/el_config/*elive-health*sh" 2>/dev/null || true
}

do_disable(){
    do_stop

    if ! ((is_quiet)) ; then
        el_notify normal web-browser "Browsers on RAM" "$( eval_gettext "Browsers on RAM feature has been disabled. Remember that this feature increases the lifespan of your SSD hard disk" )"
    fi

    LC_ALL=C sleep 0.5
    rm -f "$HOME/.config/psd/psd.conf" 1>/dev/null 2>&1 || true

    sed -i -e 's|^.*conf_browsers_on_ram=.*$|declare -g -- conf_browsers_on_ram="0"|g' "$HOME/.config/elive/elive-tools/el_config/*elive-health*sh" 2>/dev/null || true
}

do_configure(){
    close_browsers
    install_deps
    do_stop

    # configure
    if [[ -e "/var/lib/dpkg/info/google-chrome-stable.list" ]] ; then
        el_array_member_add "google-chrome" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/chromium.list" ]] ; then
        el_array_member_add "chromium" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/firefox-esr.list" ]] ; then
        el_array_member_add "firefox" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/midori.list" ]] ; then
        el_array_member_add "midori" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/opera.list" ]] ; then
        el_array_member_add "opera" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi
    if [[ -e "/var/lib/dpkg/info/vivaldi.list" ]] ; then
        el_array_member_add "vivaldi" "${_browsers[@]}" ; _browsers=("${_out[@]}")
    fi

    # no browsers available? just exit
    if [[ -z "${#_browsers[@]}" ]] ; then
        if ! ((is_quiet)) ; then
            $guitool --error --text="$( eval_gettext "No browsers are found. Install a desired Web browser first, like Google Chrome, Chromium, or Firefox, from the packages manager software in your Elive." )"
        fi
        exit
    fi

    if [[ "${#_browsers[@]}" = 1 ]] ; then
        result="${_browsers[0]}"
    else
        local message_select_browsers
        message_select_browsers="$( printf "$( eval_gettext "Select the web browser you want to run over RAM. We advise only selecting the one that you commonly use." )" "" )"


        result="$( for i in "${_browsers[@]}"
        do
            case "$i" in
                "google-chrome")
                    echo "TRUE"
                    echo "$i"
                    echo "Google Chrome"
                    ;;
                "chromium")
                    echo "FALSE"
                    echo "$i"
                    echo "Google Chromium (opensource)"
                    ;;
                "firefox")
                    echo "FALSE"
                    echo "$i"
                    echo "Firefox"
                    ;;
                "midori")
                    echo "FALSE"
                    echo "$i"
                    echo "Midori"
                    ;;
                "opera")
                    echo "FALSE"
                    echo "$i"
                    echo "Opera"
                    ;;
                "vivaldi")
                    echo "FALSE"
                    echo "$i"
                    echo "Vivaldi"
                    ;;
            esac
        done  | $guitool --height="200" --list --checklist --text="$message_select_browsers" --separator=" " --column="Enable" --column="ID" --column="Web Browser" --print-column=2 --hide-column=2  2>/dev/null || echo cancel )"
    fi
    # create a dummy conf
    rm -f "$HOME/.config/psd/psd.conf" 1>/dev/null 2>&1 || true

    # User didn't selected any browser, so do not enable anything and exit with error to be known by elive-health
    if [[ "$result" = "cancel" ]] ; then
        #do_disable
        exit
    fi
    if [[ -z "$result" ]] ; then
        $guitool --error --text="$( eval_gettext "No browsers has been selected to be used in RAM mode. Aborting..." )"
        do_disable
        exit
    fi

    # create first a default conf
    do_start
    do_stop
    LC_ALL=C sleep 0.5

    # configure
    sed -i -e "s|^.*USE_OVERLAYFS=\".*|USE_OVERLAYFS=\"yes\"|g" "$HOME/.config/psd/psd.conf"
    sed -i -e "s|^.*BROWSERS=\".*|BROWSERS=\"${result}\"|g" "$HOME/.config/psd/psd.conf"

    if grep -qs "boot=live" /proc/cmdline ; then
        sed -i -e "s|^.*USE_BACKUPS=\".*|USE_BACKUPS=\"no\"|g" "$HOME/.config/psd/psd.conf"
        sed -i -e "s|^.*BACKUP_LIMIT=.*|#BACKUP_LIMIT=1|g" "$HOME/.config/psd/psd.conf"
    else
        sed -i -e "s|^.*USE_BACKUPS=\".*|USE_BACKUPS=\"yes\"|g" "$HOME/.config/psd/psd.conf"
        sed -i -e "s|^.*BACKUP_LIMIT=.*|BACKUP_LIMIT=1|g" "$HOME/.config/psd/psd.conf"
    fi

    # enable daemon for user
    do_enable
}


main(){
    # pre {{{
    if [[ "$UID" = 0 ]] ; then
        el_error "This is not meant to be run as root, use it from your user instead"
        exit 1
    fi

    if ! systemctl --user list-dependencies 1>/dev/null 2>&1 ; then
        $guitool --error --text="$( eval_gettext "Unable to connect to Systemctl for your user. Please re-login in your desktop or reboot the machine." )"
        exit
    fi

    # }}}

    if [[ -z "$@" ]] ; then
        if $guitool --question --text="$( eval_gettext "Do you want to enable the feature of Browsers under RAM? This feature will make your browser's slightly faster and especially it will protect your hard disks increasing their lifespan." )" ; then
            do_configure
        else
            do_disable
        fi
    fi

    for arg in "$@"
    do
        case "$arg" in
            "-q"|"--quiet")
                is_quiet=1
                shift
                ;;
            enable)
                do_enable
                shift
                ;;
            disable)
                do_disable
                shift
                ;;
            configure)
                do_configure
                shift
                ;;
            *)
                # Usage
                echo -e "Usage: $(basename $BASH_SOURCE) [--quiet] enable|disable|configure"
                exit 1
                ;;
        esac
    done

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
